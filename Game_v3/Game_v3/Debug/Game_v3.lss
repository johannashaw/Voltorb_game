
Game_v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800100  00001ca6  00001d3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ca6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000466  00800240  00800240  00001e7a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ed8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c43  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011eb  00000000  00000000  00004e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001954  00000000  00000000  00006006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000818  00000000  00000000  0000795c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fe  00000000  00000000  00008174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002180  00000000  00000000  00008b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000acf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <_CharMap>:
      68:	03 03 78 48 48 00 00 00 00 00 00 00 5f 00 00 00     ..xHH......._...
      78:	03 00 03 00 12 7f 12 7f 12 04 2a 7f 2a 10 23 13     ..........*.*.#.
      88:	08 64 62 36 49 55 22 50 00 00 03 00 00 00 1c 22     .db6IU"P......."
      98:	41 00 00 41 22 1c 00 14 08 3e 08 14 00 08 1c 08     A..A"....>......
      a8:	00 00 50 30 00 00 00 08 08 08 00 00 60 60 00 00     ..P0........``..
      b8:	20 10 08 04 02 3e 41 49 41 3e 41 41 7f 40 40 62      ....>AIA>AA.@@b
      c8:	51 51 4a 44 41 49 49 5d 22 04 0a 09 08 7f 27 49     QQJDAII]".....'I
      d8:	49 49 31 3e 49 49 49 32 03 01 71 09 07 36 49 49     II1>III2..q..6II
      e8:	49 36 26 49 49 49 3e 00 36 36 00 00 00 56 36 00     I6&III>.66...V6.
      f8:	00 08 14 22 41 00 00 14 14 14 00 00 41 22 14 08     ..."A.......A"..
     108:	02 01 51 09 06 32 49 79 41 3e 7c 0a 09 0a 7c 7f     ..Q..2IyA>|...|.
     118:	49 49 49 36 3e 41 41 41 22 7f 41 41 41 3e 7f 49     III6>AAA".AAA>.I
     128:	49 41 41 7f 09 09 01 01 3e 41 41 49 3a 7f 08 08     IAA.....>AAI:...
     138:	08 7f 41 41 7f 41 41 21 41 41 3f 01 7f 0c 12 21     ..AA.AA!AA?....!
     148:	40 7f 40 40 40 40 7f 02 04 02 7f 7f 04 08 10 7f     @.@@@@..........
     158:	3e 41 41 41 3e 7f 09 09 09 06 1e 41 51 21 5e 7e     >AAA>......AQ!^~
     168:	09 19 29 46 66 49 49 49 33 01 01 7f 01 01 3f 40     ..)FfIII3.....?@
     178:	40 40 3f 07 38 40 38 07 3f 40 30 40 3f 41 36 08     @@?.8@8.?@0@?A6.
     188:	36 41 01 06 78 06 01 63 51 49 47 63 00 7f 41 41     6A..x..cQIGc..AA
     198:	00 02 04 08 10 20 00 41 41 7f 00 04 02 01 02 04     ..... .AA.......
     1a8:	40 40 40 40 40 01 02 00 00 00 24 54 54 54 78 7f     @@@@@.....$TTTx.
     1b8:	44 44 44 78 38 44 44 44 28 38 44 44 44 7f 38 54     DDDx8DDD(8DDD.8T
     1c8:	54 54 28 7e 09 09 01 02 0e 51 51 51 3e 7f 04 04     TT(~.....QQQ>...
     1d8:	04 78 00 00 7d 00 00 20 40 40 3d 00 7f 10 28 40     .x..}.. @@=...(@
     1e8:	00 00 00 7f 00 00 7c 04 18 04 7c 7c 04 04 04 78     ......|...||...x
     1f8:	38 44 44 44 38 7c 14 14 14 08 08 14 14 78 40 7c     8DDD8|.......x@|
     208:	04 04 04 08 08 54 54 54 20 08 08 7e 48 08 3c 40     .....TTT ..~H.<@
     218:	40 40 3c 0c 30 40 30 0c 3c 40 30 40 3c 44 28 10     @@<.0@0.<@0@<D(.
     228:	28 44 27 48 38 08 07 00 64 54 4c 44 00 08 77 41     (D'H8...dTLD..wA
     238:	00 00 00 7f 00 00 00 41 77 08 00 08 04 08 10 08     .......Aw.......

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	12 e0       	ldi	r17, 0x02	; 2
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	e6 ea       	ldi	r30, 0xA6	; 166
     25c:	fc e1       	ldi	r31, 0x1C	; 28
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	a0 34       	cpi	r26, 0x40	; 64
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	26 e0       	ldi	r18, 0x06	; 6
     26c:	a0 e4       	ldi	r26, 0x40	; 64
     26e:	b2 e0       	ldi	r27, 0x02	; 2
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a6 3a       	cpi	r26, 0xA6	; 166
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 44 01 	call	0x288	; 0x288 <main>
     27e:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <ButtonHeld>:
	FullNewScreen();
}

// A button was pressed, do something with that information.
void ButtonHeld(int row, int col)
{
     286:	08 95       	ret

00000288 <main>:
	//  **************************************************************
	//							One-Time Inits:
	//  **************************************************************
	
	// set up serial for 2MHz bus, 9600 BAUD, no interrupts
	SCI0_Init(F_CPU, 9600, 0);
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	10 e0       	ldi	r17, 0x00	; 0
     28c:	20 e8       	ldi	r18, 0x80	; 128
     28e:	35 e2       	ldi	r19, 0x25	; 37
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	60 e8       	ldi	r22, 0x80	; 128
     296:	74 e8       	ldi	r23, 0x84	; 132
     298:	8e e1       	ldi	r24, 0x1E	; 30
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 a8 07 	call	0xf50	; 0xf50 <SCI0_Init>
	SCI0_TxString("\n\nHello from the ATmega328P!\n\n");
     2a0:	8e e2       	ldi	r24, 0x2E	; 46
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	0e 94 13 08 	call	0x1026	; 0x1026 <SCI0_TxString>
	
	// initialize OLED
	SSD1306_DispInit();
     2a8:	0e 94 02 09 	call	0x1204	; 0x1204 <SSD1306_DispInit>
	
	// initialize the Game UI
	//GameInitUI();

	board = GetArray_pt();
     2ac:	0e 94 52 04 	call	0x8a4	; 0x8a4 <GetArray_pt>
     2b0:	90 93 6b 06 	sts	0x066B, r25	; 0x80066b <board+0x1>
     2b4:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <board>
	totalPoints = GetTotalPoints_pt();
     2b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <GetTotalPoints_pt>
     2bc:	90 93 69 06 	sts	0x0669, r25	; 0x800669 <totalPoints+0x1>
     2c0:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <totalPoints>
	Level =GetLevel_pt();
     2c4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <GetLevel_pt>
     2c8:	90 93 6f 06 	sts	0x066F, r25	; 0x80066f <Level+0x1>
     2cc:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <Level>
	LevelPoints = GetLevelPoints_pt();
     2d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <GetLevelPoints_pt>
     2d4:	90 93 6d 06 	sts	0x066D, r25	; 0x80066d <LevelPoints+0x1>
     2d8:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <LevelPoints>

	Boardinit();
     2dc:	0e 94 43 04 	call	0x886	; 0x886 <Boardinit>
	// initialize the buttons and set buttonPressed and held callback functions
	ButtonsSetup(&ButtonPressed, &ButtonHeld);
	#endif
	
	#ifndef TESTING
	GameInitUI();
     2e0:	0e 94 86 05 	call	0xb0c	; 0xb0c <GameInitUI>
	// initialize the buttons and set buttonPressed and held callback functions
	ButtonsSetup(&StartGame, &ButtonHeld);
     2e4:	63 e4       	ldi	r22, 0x43	; 67
     2e6:	71 e0       	ldi	r23, 0x01	; 1
     2e8:	8b e0       	ldi	r24, 0x0B	; 11
     2ea:	93 e0       	ldi	r25, 0x03	; 3
     2ec:	0e 94 14 03 	call	0x628	; 0x628 <ButtonsSetup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f0:	8f e4       	ldi	r24, 0x4F	; 79
     2f2:	93 ec       	ldi	r25, 0xC3	; 195
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <main+0x6c>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0x72>
     2fa:	00 00       	nop
	// main program loop - don't exit
	while(1)
	{
		_delay_ms(100);
				
		PINB = IndicatorLed_B;
     2fc:	82 e0       	ldi	r24, 0x02	; 2
     2fe:	83 b9       	out	0x03, r24	; 3
		
		//if ((PIND & (COL1_D | COL2_D | COL3_D | COL4_D)) | (COL5_B & PINB))
		CheckButtons();
     300:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <CheckButtons>
     304:	f5 cf       	rjmp	.-22     	; 0x2f0 <main+0x68>

00000306 <RevealAllTiles>:
}
#endif


void RevealAllTiles()
{
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
	for (int i = 0; i < 25; i++) 
     30a:	c0 e0       	ldi	r28, 0x00	; 0
     30c:	d0 e0       	ldi	r29, 0x00	; 0
     30e:	14 c0       	rjmp	.+40     	; 0x338 <RevealAllTiles+0x32>
	{
		ChangeTile(i / 5, i % 5, board[i] & ValueBits, 1);
     310:	e0 91 6a 06 	lds	r30, 0x066A	; 0x80066a <board>
     314:	f0 91 6b 06 	lds	r31, 0x066B	; 0x80066b <board+0x1>
     318:	ec 0f       	add	r30, r28
     31a:	fd 1f       	adc	r31, r29
     31c:	40 81       	ld	r20, Z
     31e:	47 70       	andi	r20, 0x07	; 7
     320:	ce 01       	movw	r24, r28
     322:	65 e0       	ldi	r22, 0x05	; 5
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	0e 94 31 0a 	call	0x1462	; 0x1462 <__divmodhi4>
     32a:	fb 01       	movw	r30, r22
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	bc 01       	movw	r22, r24
     330:	cf 01       	movw	r24, r30
     332:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <ChangeTile>
#endif


void RevealAllTiles()
{
	for (int i = 0; i < 25; i++) 
     336:	21 96       	adiw	r28, 0x01	; 1
     338:	c9 31       	cpi	r28, 0x19	; 25
     33a:	d1 05       	cpc	r29, r1
     33c:	4c f3       	brlt	.-46     	; 0x310 <RevealAllTiles+0xa>
	{
		ChangeTile(i / 5, i % 5, board[i] & ValueBits, 1);
	}
	SSD1306_Render();
     33e:	0e 94 bb 08 	call	0x1176	; 0x1176 <SSD1306_Render>
}
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <FullNewScreen>:

void FullNewScreen()
{
     348:	df 92       	push	r13
     34a:	ef 92       	push	r14
     34c:	ff 92       	push	r15
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	e2 97       	sbiw	r28, 0x32	; 50
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
	
	#ifdef DEBUG_MAIN
	CheckChange();
	#endif
	
	SSD1306_Clear();
     366:	0e 94 e7 08 	call	0x11ce	; 0x11ce <SSD1306_Clear>

	//display the game title
	SSD1306_StringXY(0, row++, "Boom-Boom");
     36a:	4d e4       	ldi	r20, 0x4D	; 77
     36c:	51 e0       	ldi	r21, 0x01	; 1
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>
	row++;
	
	//display level
	sprintf(output, "Level: %2d", *Level);
     376:	e0 91 6e 06 	lds	r30, 0x066E	; 0x80066e <Level>
     37a:	f0 91 6f 06 	lds	r31, 0x066F	; 0x80066f <Level+0x1>
     37e:	81 81       	ldd	r24, Z+1	; 0x01
     380:	8f 93       	push	r24
     382:	80 81       	ld	r24, Z
     384:	8f 93       	push	r24
     386:	87 e5       	ldi	r24, 0x57	; 87
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	9f 93       	push	r25
     38c:	8f 93       	push	r24
     38e:	8e 01       	movw	r16, r28
     390:	0f 5f       	subi	r16, 0xFF	; 255
     392:	1f 4f       	sbci	r17, 0xFF	; 255
     394:	1f 93       	push	r17
     396:	0f 93       	push	r16
     398:	0e 94 45 0b 	call	0x168a	; 0x168a <sprintf>
	SSD1306_StringXY(0, row++, output);
     39c:	a8 01       	movw	r20, r16
     39e:	62 e0       	ldi	r22, 0x02	; 2
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>

	//display total points
	SSD1306_StringXY(0, row++, "Total:");
     3a6:	42 e6       	ldi	r20, 0x62	; 98
     3a8:	51 e0       	ldi	r21, 0x01	; 1
     3aa:	63 e0       	ldi	r22, 0x03	; 3
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>
	sprintf(output, "%9d", *totalPoints);
     3b2:	e0 91 68 06 	lds	r30, 0x0668	; 0x800668 <totalPoints>
     3b6:	f0 91 69 06 	lds	r31, 0x0669	; 0x800669 <totalPoints+0x1>
     3ba:	81 81       	ldd	r24, Z+1	; 0x01
     3bc:	8f 93       	push	r24
     3be:	80 81       	ld	r24, Z
     3c0:	8f 93       	push	r24
     3c2:	0f 2e       	mov	r0, r31
     3c4:	f9 e6       	ldi	r31, 0x69	; 105
     3c6:	ef 2e       	mov	r14, r31
     3c8:	f1 e0       	ldi	r31, 0x01	; 1
     3ca:	ff 2e       	mov	r15, r31
     3cc:	f0 2d       	mov	r31, r0
     3ce:	ff 92       	push	r15
     3d0:	ef 92       	push	r14
     3d2:	1f 93       	push	r17
     3d4:	0f 93       	push	r16
     3d6:	0e 94 45 0b 	call	0x168a	; 0x168a <sprintf>
	SSD1306_StringXY(0, row++, output);
     3da:	a8 01       	movw	r20, r16
     3dc:	64 e0       	ldi	r22, 0x04	; 4
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>

	//display level points
	SSD1306_StringXY(0, row++, "Points:");
     3e4:	4d e6       	ldi	r20, 0x6D	; 109
     3e6:	51 e0       	ldi	r21, 0x01	; 1
     3e8:	65 e0       	ldi	r22, 0x05	; 5
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>
	pointRow = row;		// so that the Points will always be printed to the right row
     3f0:	86 e0       	ldi	r24, 0x06	; 6
     3f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pointRow>
	sprintf(output, "%9d", *LevelPoints);
     3f6:	e0 91 6c 06 	lds	r30, 0x066C	; 0x80066c <LevelPoints>
     3fa:	f0 91 6d 06 	lds	r31, 0x066D	; 0x80066d <LevelPoints+0x1>
     3fe:	81 81       	ldd	r24, Z+1	; 0x01
     400:	8f 93       	push	r24
     402:	80 81       	ld	r24, Z
     404:	8f 93       	push	r24
     406:	ff 92       	push	r15
     408:	ef 92       	push	r14
     40a:	1f 93       	push	r17
     40c:	0f 93       	push	r16
     40e:	0e 94 45 0b 	call	0x168a	; 0x168a <sprintf>
	SSD1306_StringXY(0, row++, output);
     412:	a8 01       	movw	r20, r16
     414:	66 e0       	ldi	r22, 0x06	; 6
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>


	row++;
	
	// make game grid
	MakeGrid();
     41c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <MakeGrid>


	// display the bombs and points for each row/column'
	for (int i = 0; i < 5; i++)
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	f8 94       	cli
     424:	de bf       	out	0x3e, r29	; 62
     426:	0f be       	out	0x3f, r0	; 63
     428:	cd bf       	out	0x3d, r28	; 61
     42a:	00 e0       	ldi	r16, 0x00	; 0
     42c:	10 e0       	ldi	r17, 0x00	; 0
     42e:	4d c0       	rjmp	.+154    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
	{
		char rowBombs = 0, colBombs = 0, rowPts = 0, colPts = 0;
		for (int j = 0; j < 5; j++)
		{
			// going through i row: Board(i, j)
			rowBombs += (Board(i, j) & ValueBits) == 0;
     430:	40 91 6a 06 	lds	r20, 0x066A	; 0x80066a <board>
     434:	50 91 6b 06 	lds	r21, 0x066B	; 0x80066b <board+0x1>
     438:	d8 01       	movw	r26, r16
     43a:	aa 0f       	add	r26, r26
     43c:	bb 1f       	adc	r27, r27
     43e:	aa 0f       	add	r26, r26
     440:	bb 1f       	adc	r27, r27
     442:	a0 0f       	add	r26, r16
     444:	b1 1f       	adc	r27, r17
     446:	a2 0f       	add	r26, r18
     448:	b3 1f       	adc	r27, r19
     44a:	a4 0f       	add	r26, r20
     44c:	b5 1f       	adc	r27, r21
     44e:	9c 91       	ld	r25, X
     450:	97 70       	andi	r25, 0x07	; 7
     452:	61 e0       	ldi	r22, 0x01	; 1
     454:	09 f0       	breq	.+2      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	86 0f       	add	r24, r22
			rowPts += Board(i, j) & ValueBits;
     45a:	d9 0e       	add	r13, r25
			// going through i column: Board(j, i)
			colBombs += (Board(j, i) & ValueBits) == 0;
     45c:	f9 01       	movw	r30, r18
     45e:	ee 0f       	add	r30, r30
     460:	ff 1f       	adc	r31, r31
     462:	ee 0f       	add	r30, r30
     464:	ff 1f       	adc	r31, r31
     466:	e2 0f       	add	r30, r18
     468:	f3 1f       	adc	r31, r19
     46a:	e0 0f       	add	r30, r16
     46c:	f1 1f       	adc	r31, r17
     46e:	e4 0f       	add	r30, r20
     470:	f5 1f       	adc	r31, r21
     472:	90 81       	ld	r25, Z
     474:	97 70       	andi	r25, 0x07	; 7
     476:	41 e0       	ldi	r20, 0x01	; 1
     478:	09 f0       	breq	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	e4 0e       	add	r14, r20
			colPts += Board(j, i) & ValueBits;
     47e:	f9 0e       	add	r15, r25

	// display the bombs and points for each row/column'
	for (int i = 0; i < 5; i++)
	{
		char rowBombs = 0, colBombs = 0, rowPts = 0, colPts = 0;
		for (int j = 0; j < 5; j++)
     480:	2f 5f       	subi	r18, 0xFF	; 255
     482:	3f 4f       	sbci	r19, 0xFF	; 255
     484:	06 c0       	rjmp	.+12     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	f1 2c       	mov	r15, r1
     48c:	d1 2c       	mov	r13, r1
     48e:	e1 2c       	mov	r14, r1
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	25 30       	cpi	r18, 0x05	; 5
     494:	31 05       	cpc	r19, r1
     496:	64 f2       	brlt	.-104    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			// going through i column: Board(j, i)
			colBombs += (Board(j, i) & ValueBits) == 0;
			colPts += Board(j, i) & ValueBits;
		}
		// set for row
		DisplayBombLine(rowBombs, i, 5);
     498:	45 e0       	ldi	r20, 0x05	; 5
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	b8 01       	movw	r22, r16
     49e:	0e 94 f4 06 	call	0xde8	; 0xde8 <DisplayBombLine>
		DisplayPointSum(rowPts, i, 5);
     4a2:	45 e0       	ldi	r20, 0x05	; 5
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	b8 01       	movw	r22, r16
     4a8:	8d 2d       	mov	r24, r13
     4aa:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DisplayPointSum>
		// set for col
		DisplayBombLine(colBombs, 5, i);
     4ae:	a8 01       	movw	r20, r16
     4b0:	65 e0       	ldi	r22, 0x05	; 5
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	8e 2d       	mov	r24, r14
     4b6:	0e 94 f4 06 	call	0xde8	; 0xde8 <DisplayBombLine>
		DisplayPointSum(colPts, 5, i);
     4ba:	a8 01       	movw	r20, r16
     4bc:	65 e0       	ldi	r22, 0x05	; 5
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	8f 2d       	mov	r24, r15
     4c2:	0e 94 b6 06 	call	0xd6c	; 0xd6c <DisplayPointSum>
	// make game grid
	MakeGrid();


	// display the bombs and points for each row/column'
	for (int i = 0; i < 5; i++)
     4c6:	0f 5f       	subi	r16, 0xFF	; 255
     4c8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ca:	05 30       	cpi	r16, 0x05	; 5
     4cc:	11 05       	cpc	r17, r1
     4ce:	dc f2       	brlt	.-74     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
	//{
		//ChangeTile(i / 5, i % 5, board[i] & ValueBits, (board[i] & RevealedBit) >> 3);
	//}

	
	SSD1306_Render();
     4d0:	0e 94 bb 08 	call	0x1176	; 0x1176 <SSD1306_Render>
}
     4d4:	e2 96       	adiw	r28, 0x32	; 50
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	08 95       	ret

000004f0 <ButtonPressed>:
//****************************************************************************


// A button was pressed, do something with that information.
void ButtonPressed(int row, int col)
{
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	6e 97       	sbiw	r28, 0x1e	; 30
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
     50e:	7c 01       	movw	r14, r24
     510:	6b 01       	movw	r12, r22
	char output[30];
	
	char retval = TryReveal(row, col);
     512:	0e 94 1b 05 	call	0xa36	; 0xa36 <TryReveal>
     516:	18 2f       	mov	r17, r24
	#endif

	
	
	// if 0, no changes so return
	if (retval == 0)
     518:	88 23       	and	r24, r24
     51a:	09 f4       	brne	.+2      	; 0x51e <ButtonPressed+0x2e>
     51c:	6e c0       	rjmp	.+220    	; 0x5fa <ButtonPressed+0x10a>
		return;
		
	if (retval < 3)
     51e:	83 30       	cpi	r24, 0x03	; 3
     520:	08 f0       	brcs	.+2      	; 0x524 <ButtonPressed+0x34>
     522:	62 c0       	rjmp	.+196    	; 0x5e8 <ButtonPressed+0xf8>
	{
		ChangeTile(row, col, Board(row,col) & ValueBits, (Board(row,col) & RevealedBit) >> 3);
     524:	f7 01       	movw	r30, r14
     526:	ee 0f       	add	r30, r30
     528:	ff 1f       	adc	r31, r31
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
     52e:	ee 0d       	add	r30, r14
     530:	ff 1d       	adc	r31, r15
     532:	ec 0d       	add	r30, r12
     534:	fd 1d       	adc	r31, r13
     536:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <board>
     53a:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <board+0x1>
     53e:	e8 0f       	add	r30, r24
     540:	f9 1f       	adc	r31, r25
     542:	40 81       	ld	r20, Z
     544:	24 2f       	mov	r18, r20
     546:	28 70       	andi	r18, 0x08	; 8
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	35 95       	asr	r19
     54c:	27 95       	ror	r18
     54e:	35 95       	asr	r19
     550:	27 95       	ror	r18
     552:	35 95       	asr	r19
     554:	27 95       	ror	r18
     556:	47 70       	andi	r20, 0x07	; 7
     558:	b6 01       	movw	r22, r12
     55a:	c7 01       	movw	r24, r14
     55c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <ChangeTile>
	
		// update level points
		sprintf(output, "%9d", *LevelPoints);
     560:	e0 91 6c 06 	lds	r30, 0x066C	; 0x80066c <LevelPoints>
     564:	f0 91 6d 06 	lds	r31, 0x066D	; 0x80066d <LevelPoints+0x1>
     568:	81 81       	ldd	r24, Z+1	; 0x01
     56a:	8f 93       	push	r24
     56c:	80 81       	ld	r24, Z
     56e:	8f 93       	push	r24
     570:	89 e6       	ldi	r24, 0x69	; 105
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	9f 93       	push	r25
     576:	8f 93       	push	r24
     578:	ce 01       	movw	r24, r28
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	7c 01       	movw	r14, r24
     57e:	9f 93       	push	r25
     580:	8f 93       	push	r24
     582:	0e 94 45 0b 	call	0x168a	; 0x168a <sprintf>
		SSD1306_StringXY(0, pointRow, output);
     586:	a7 01       	movw	r20, r14
     588:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <pointRow>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>
		
		// indicate the win/lose state
		if (retval == 2 && *LevelPoints == 0)	
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	12 30       	cpi	r17, 0x02	; 2
     5a0:	79 f4       	brne	.+30     	; 0x5c0 <ButtonPressed+0xd0>
     5a2:	e0 91 6c 06 	lds	r30, 0x066C	; 0x80066c <LevelPoints>
     5a6:	f0 91 6d 06 	lds	r31, 0x066D	; 0x80066d <LevelPoints+0x1>
     5aa:	80 81       	ld	r24, Z
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	89 2b       	or	r24, r25
     5b0:	39 f4       	brne	.+14     	; 0x5c0 <ButtonPressed+0xd0>
			SSD1306_StringXY(0, 7, "You Lost.");	
     5b2:	45 e7       	ldi	r20, 0x75	; 117
     5b4:	51 e0       	ldi	r21, 0x01	; 1
     5b6:	67 e0       	ldi	r22, 0x07	; 7
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>
     5be:	11 c0       	rjmp	.+34     	; 0x5e2 <ButtonPressed+0xf2>
		else if (retval == 2 && *LevelPoints > 0)
     5c0:	12 30       	cpi	r17, 0x02	; 2
     5c2:	79 f4       	brne	.+30     	; 0x5e2 <ButtonPressed+0xf2>
     5c4:	e0 91 6c 06 	lds	r30, 0x066C	; 0x80066c <LevelPoints>
     5c8:	f0 91 6d 06 	lds	r31, 0x066D	; 0x80066d <LevelPoints+0x1>
     5cc:	80 81       	ld	r24, Z
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	18 16       	cp	r1, r24
     5d2:	19 06       	cpc	r1, r25
     5d4:	34 f4       	brge	.+12     	; 0x5e2 <ButtonPressed+0xf2>
			SSD1306_StringXY(0, 7, "Win!     ");
     5d6:	4f e7       	ldi	r20, 0x7F	; 127
     5d8:	51 e0       	ldi	r21, 0x01	; 1
     5da:	67 e0       	ldi	r22, 0x07	; 7
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>
			
			
		SSD1306_Render();
     5e2:	0e 94 bb 08 	call	0x1176	; 0x1176 <SSD1306_Render>
		return;
     5e6:	09 c0       	rjmp	.+18     	; 0x5fa <ButtonPressed+0x10a>
	}
	
	if (retval == 3)
     5e8:	83 30       	cpi	r24, 0x03	; 3
     5ea:	29 f4       	brne	.+10     	; 0x5f6 <ButtonPressed+0x106>
	{
		RevealAllTiles();
     5ec:	0e 94 83 01 	call	0x306	; 0x306 <RevealAllTiles>
		SSD1306_Render();
     5f0:	0e 94 bb 08 	call	0x1176	; 0x1176 <SSD1306_Render>
		return;
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <ButtonPressed+0x10a>
	}
	
	FullNewScreen();
     5f6:	0e 94 a4 01 	call	0x348	; 0x348 <FullNewScreen>
}
     5fa:	6e 96       	adiw	r28, 0x1e	; 30
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	08 95       	ret

00000616 <StartGame>:
	SSD1306_Render();
}

void StartGame()
{
	NewLevel();
     616:	0e 94 5e 04 	call	0x8bc	; 0x8bc <NewLevel>

	// display the new level on the OLED
	FullNewScreen();
     61a:	0e 94 a4 01 	call	0x348	; 0x348 <FullNewScreen>
	
	ReassignButtonCallback(&ButtonPressed);
     61e:	88 e7       	ldi	r24, 0x78	; 120
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	0e 94 3e 04 	call	0x87c	; 0x87c <ReassignButtonCallback>
     626:	08 95       	ret

00000628 <ButtonsSetup>:

// setting up the buttons that are being used
void ButtonsSetup(void (*PushedCallback)(int, int), void (*HeldCallback)(int, int))
{
	// set global Callback function pointer to the one passed to us
	ButtonpressedCallback = *PushedCallback;
     628:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <ButtonpressedCallback+0x1>
     62c:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <ButtonpressedCallback>
	ButtonHeldCallback = *HeldCallback;
     630:	70 93 71 06 	sts	0x0671, r23	; 0x800671 <ButtonHeldCallback+0x1>
     634:	60 93 70 06 	sts	0x0670, r22	; 0x800670 <ButtonHeldCallback>
	
	//Set as as outputs
	DDRC |=	ROW1_C | ROW2_C | ROW3_C;
     638:	87 b1       	in	r24, 0x07	; 7
     63a:	8e 60       	ori	r24, 0x0E	; 14
     63c:	87 b9       	out	0x07, r24	; 7
	DDRD |= ROW4_D | ROW5_D;
     63e:	8a b1       	in	r24, 0x0a	; 10
     640:	8c 60       	ori	r24, 0x0C	; 12
     642:	8a b9       	out	0x0a, r24	; 10
	
	//set the outputs to high
	ROW1to3_C_On(ROW1_C | ROW2_C | ROW3_C);
     644:	88 b1       	in	r24, 0x08	; 8
     646:	8e 60       	ori	r24, 0x0E	; 14
     648:	88 b9       	out	0x08, r24	; 8
	ROW4to5_D_On(ROW4_D | ROW5_D);
     64a:	8b b1       	in	r24, 0x0b	; 11
     64c:	8c 60       	ori	r24, 0x0C	; 12
     64e:	8b b9       	out	0x0b, r24	; 11
	
	//disable the pull-ups *IMPORTANT*
	PORTD &= ~(COL1_D | COL2_D | COL3_D | COL4_D);
     650:	8b b1       	in	r24, 0x0b	; 11
     652:	8f 70       	andi	r24, 0x0F	; 15
     654:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~COL5_B;
     656:	85 b1       	in	r24, 0x05	; 5
     658:	8e 7f       	andi	r24, 0xFE	; 254
     65a:	85 b9       	out	0x05, r24	; 5
	// Set pins as inputs
	DDRD &= ~(COL1_D | COL2_D | COL3_D | COL4_D);		//0b 0000 1111
     65c:	8a b1       	in	r24, 0x0a	; 10
     65e:	8f 70       	andi	r24, 0x0F	; 15
     660:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~COL5_B;		//0b 1111 1110	
     662:	84 b1       	in	r24, 0x04	; 4
     664:	8e 7f       	andi	r24, 0xFE	; 254
     666:	84 b9       	out	0x04, r24	; 4
	
		
	// indicator led setup
	DDRB |= IndicatorLed_B;
     668:	84 b1       	in	r24, 0x04	; 4
     66a:	82 60       	ori	r24, 0x02	; 2
     66c:	84 b9       	out	0x04, r24	; 4
	
	
	// set all bits in ArePressed to 0
	//ArePressed[0] = ArePressed[1] = 0;
	for (int i = 0; i < 25; i++)
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	08 c0       	rjmp	.+16     	; 0x684 <ButtonsSetup+0x5c>
		ArePressed[i] = 0;	
     674:	fc 01       	movw	r30, r24
     676:	ee 0f       	add	r30, r30
     678:	ff 1f       	adc	r31, r31
     67a:	ee 58       	subi	r30, 0x8E	; 142
     67c:	f9 4f       	sbci	r31, 0xF9	; 249
     67e:	11 82       	std	Z+1, r1	; 0x01
     680:	10 82       	st	Z, r1
	DDRB |= IndicatorLed_B;
	
	
	// set all bits in ArePressed to 0
	//ArePressed[0] = ArePressed[1] = 0;
	for (int i = 0; i < 25; i++)
     682:	01 96       	adiw	r24, 0x01	; 1
     684:	89 31       	cpi	r24, 0x19	; 25
     686:	91 05       	cpc	r25, r1
     688:	ac f3       	brlt	.-22     	; 0x674 <ButtonsSetup+0x4c>
		ArePressed[i] = 0;	
}
     68a:	08 95       	ret

0000068c <__checkColsHelper>:

// Used in the Check BUttons function
// checks to see if any of the buttons in the given row is pushed, if so, invokes the callback function 
void __checkColsHelper(int row)
{
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
	//cause I started this stupid:
	

	row--;
     694:	8c 01       	movw	r16, r24
     696:	01 50       	subi	r16, 0x01	; 1
     698:	11 09       	sbc	r17, r1
	
	//for columns 1 through 4, pins on port D
	for (int col = 0; col < 4; col++)
     69a:	c0 e0       	ldi	r28, 0x00	; 0
     69c:	d0 e0       	ldi	r29, 0x00	; 0
     69e:	43 c0       	rjmp	.+134    	; 0x726 <__checkColsHelper+0x9a>
	{
		if(PIND & (1 << (col + 4)))
     6a0:	89 b1       	in	r24, 0x09	; 9
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	9e 01       	movw	r18, r28
     6a6:	2c 5f       	subi	r18, 0xFC	; 252
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <__checkColsHelper+0x24>
     6ac:	95 95       	asr	r25
     6ae:	87 95       	ror	r24
     6b0:	2a 95       	dec	r18
     6b2:	e2 f7       	brpl	.-8      	; 0x6ac <__checkColsHelper+0x20>
     6b4:	80 ff       	sbrs	r24, 0
     6b6:	27 c0       	rjmp	.+78     	; 0x706 <__checkColsHelper+0x7a>
		{
			ArePressed[row*5 + col]++;
     6b8:	f8 01       	movw	r30, r16
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	e0 0f       	add	r30, r16
     6c4:	f1 1f       	adc	r31, r17
     6c6:	ec 0f       	add	r30, r28
     6c8:	fd 1f       	adc	r31, r29
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	ee 58       	subi	r30, 0x8E	; 142
     6d0:	f9 4f       	sbci	r31, 0xF9	; 249
     6d2:	80 81       	ld	r24, Z
     6d4:	91 81       	ldd	r25, Z+1	; 0x01
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	91 83       	std	Z+1, r25	; 0x01
     6da:	80 83       	st	Z, r24
			
			// Callback for when the button is first pressed
			if (ArePressed[row*5 + col] == 1)
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	91 05       	cpc	r25, r1
     6e0:	41 f4       	brne	.+16     	; 0x6f2 <__checkColsHelper+0x66>
				ButtonpressedCallback(row, col);
     6e2:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <ButtonpressedCallback>
     6e6:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <ButtonpressedCallback+0x1>
     6ea:	be 01       	movw	r22, r28
     6ec:	c8 01       	movw	r24, r16
     6ee:	09 95       	icall
     6f0:	19 c0       	rjmp	.+50     	; 0x724 <__checkColsHelper+0x98>
				
			// Callback for when the button is held for 2 seconds
			else if (ArePressed[row*5 + col] == 10)
     6f2:	0a 97       	sbiw	r24, 0x0a	; 10
     6f4:	b9 f4       	brne	.+46     	; 0x724 <__checkColsHelper+0x98>
			{
				ButtonHeldCallback(row, col);
     6f6:	e0 91 70 06 	lds	r30, 0x0670	; 0x800670 <ButtonHeldCallback>
     6fa:	f0 91 71 06 	lds	r31, 0x0671	; 0x800671 <ButtonHeldCallback+0x1>
     6fe:	be 01       	movw	r22, r28
     700:	c8 01       	movw	r24, r16
     702:	09 95       	icall
     704:	0f c0       	rjmp	.+30     	; 0x724 <__checkColsHelper+0x98>
			}
		}
		else
		{
			ArePressed[row*5 + col] = 0;
     706:	f8 01       	movw	r30, r16
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	e0 0f       	add	r30, r16
     712:	f1 1f       	adc	r31, r17
     714:	ec 0f       	add	r30, r28
     716:	fd 1f       	adc	r31, r29
     718:	ee 0f       	add	r30, r30
     71a:	ff 1f       	adc	r31, r31
     71c:	ee 58       	subi	r30, 0x8E	; 142
     71e:	f9 4f       	sbci	r31, 0xF9	; 249
     720:	11 82       	std	Z+1, r1	; 0x01
     722:	10 82       	st	Z, r1
	

	row--;
	
	//for columns 1 through 4, pins on port D
	for (int col = 0; col < 4; col++)
     724:	21 96       	adiw	r28, 0x01	; 1
     726:	c4 30       	cpi	r28, 0x04	; 4
     728:	d1 05       	cpc	r29, r1
     72a:	0c f4       	brge	.+2      	; 0x72e <__checkColsHelper+0xa2>
     72c:	b9 cf       	rjmp	.-142    	; 0x6a0 <__checkColsHelper+0x14>
		{
			ArePressed[row*5 + col] = 0;
		}
	}
	//for col 5, pin on port B
	if (PINB & COL5_B)
     72e:	18 9b       	sbis	0x03, 0	; 3
     730:	28 c0       	rjmp	.+80     	; 0x782 <__checkColsHelper+0xf6>
	{
		ArePressed[row*5 + 4]++;	
     732:	f8 01       	movw	r30, r16
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	ee 0f       	add	r30, r30
     73a:	ff 1f       	adc	r31, r31
     73c:	e0 0f       	add	r30, r16
     73e:	f1 1f       	adc	r31, r17
     740:	34 96       	adiw	r30, 0x04	; 4
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	ee 58       	subi	r30, 0x8E	; 142
     748:	f9 4f       	sbci	r31, 0xF9	; 249
     74a:	80 81       	ld	r24, Z
     74c:	91 81       	ldd	r25, Z+1	; 0x01
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	91 83       	std	Z+1, r25	; 0x01
     752:	80 83       	st	Z, r24
		
		// Callback for when the button is first pressed
		if (ArePressed[row*5 + 4] == 1)
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	91 05       	cpc	r25, r1
     758:	49 f4       	brne	.+18     	; 0x76c <__checkColsHelper+0xe0>
			ButtonpressedCallback(row, 4);
     75a:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <ButtonpressedCallback>
     75e:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <ButtonpressedCallback+0x1>
     762:	64 e0       	ldi	r22, 0x04	; 4
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	c8 01       	movw	r24, r16
     768:	09 95       	icall
     76a:	19 c0       	rjmp	.+50     	; 0x79e <__checkColsHelper+0x112>
			
		// Callback for when the button is held for 2 seconds
		else if (ArePressed[row*5 + 4] == 10)
     76c:	0a 97       	sbiw	r24, 0x0a	; 10
     76e:	b9 f4       	brne	.+46     	; 0x79e <__checkColsHelper+0x112>
			ButtonHeldCallback(row, 4);
     770:	e0 91 70 06 	lds	r30, 0x0670	; 0x800670 <ButtonHeldCallback>
     774:	f0 91 71 06 	lds	r31, 0x0671	; 0x800671 <ButtonHeldCallback+0x1>
     778:	64 e0       	ldi	r22, 0x04	; 4
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	c8 01       	movw	r24, r16
     77e:	09 95       	icall
     780:	0e c0       	rjmp	.+28     	; 0x79e <__checkColsHelper+0x112>
	}
	else
		ArePressed[row*5 + 4] = 0;
     782:	f8 01       	movw	r30, r16
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	e0 0f       	add	r30, r16
     78e:	f1 1f       	adc	r31, r17
     790:	34 96       	adiw	r30, 0x04	; 4
     792:	ee 0f       	add	r30, r30
     794:	ff 1f       	adc	r31, r31
     796:	ee 58       	subi	r30, 0x8E	; 142
     798:	f9 4f       	sbci	r31, 0xF9	; 249
     79a:	11 82       	std	Z+1, r1	; 0x01
     79c:	10 82       	st	Z, r1
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	08 95       	ret

000007a8 <CheckButtons>:

// A button in column 1, 2, 3, and/or 4 has been pushed.
// Find out which row/column belongs to the button(s) pressed.
void CheckButtons()
{
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
	// if no buttons are pressed, leave
	if (!((PIND & (COL1_D | COL2_D | COL3_D | COL4_D)) | (COL5_B & PINB)))
     7b0:	99 b1       	in	r25, 0x09	; 9
     7b2:	83 b1       	in	r24, 0x03	; 3
     7b4:	90 7f       	andi	r25, 0xF0	; 240
     7b6:	81 70       	andi	r24, 0x01	; 1
     7b8:	89 2b       	or	r24, r25
     7ba:	19 f4       	brne	.+6      	; 0x7c2 <CheckButtons+0x1a>
	{
		WasPressed = 0;
     7bc:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <__data_end>
		return;
     7c0:	58 c0       	rjmp	.+176    	; 0x872 <__DATA_REGION_LENGTH__+0x72>
	}
	
	if (!WasPressed)
     7c2:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__data_end>
     7c6:	88 23       	and	r24, r24
     7c8:	51 f0       	breq	.+20     	; 0x7de <CheckButtons+0x36>
     7ca:	0e c0       	rjmp	.+28     	; 0x7e8 <CheckButtons+0x40>
	{
		for (int i = 0; i < 25; i++)
			ArePressed[i] = 0;
     7cc:	fc 01       	movw	r30, r24
     7ce:	ee 0f       	add	r30, r30
     7d0:	ff 1f       	adc	r31, r31
     7d2:	ee 58       	subi	r30, 0x8E	; 142
     7d4:	f9 4f       	sbci	r31, 0xF9	; 249
     7d6:	11 82       	std	Z+1, r1	; 0x01
     7d8:	10 82       	st	Z, r1
		return;
	}
	
	if (!WasPressed)
	{
		for (int i = 0; i < 25; i++)
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <CheckButtons+0x3a>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	89 31       	cpi	r24, 0x19	; 25
     7e4:	91 05       	cpc	r25, r1
     7e6:	94 f3       	brlt	.-28     	; 0x7cc <CheckButtons+0x24>
			ArePressed[i] = 0;
	}
	
	// set the outputs of the rows to 0
	ROW1to3_C_Off(ROW1_C | ROW2_C | ROW3_C);
     7e8:	88 b1       	in	r24, 0x08	; 8
     7ea:	81 7f       	andi	r24, 0xF1	; 241
     7ec:	88 b9       	out	0x08, r24	; 8
	ROW4to5_D_Off(ROW4_D | ROW5_D);
     7ee:	8b b1       	in	r24, 0x0b	; 11
     7f0:	83 7f       	andi	r24, 0xF3	; 243
     7f2:	8b b9       	out	0x0b, r24	; 11
	
	// go through each row, setting the output to 1, and seeing if any of the columns inputs are high
	// for rows 1 to 3, the pins on port C
	for (int row = 1; row <= 3; row++ )
     7f4:	01 e0       	ldi	r16, 0x01	; 1
     7f6:	10 e0       	ldi	r17, 0x00	; 0
     7f8:	14 c0       	rjmp	.+40     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	{
		//set the row we're checking to high
		ROW1to3_C_On(1 << row);
     7fa:	88 b1       	in	r24, 0x08	; 8
     7fc:	c1 e0       	ldi	r28, 0x01	; 1
     7fe:	d0 e0       	ldi	r29, 0x00	; 0
     800:	00 2e       	mov	r0, r16
     802:	02 c0       	rjmp	.+4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     804:	cc 0f       	add	r28, r28
     806:	dd 1f       	adc	r29, r29
     808:	0a 94       	dec	r0
     80a:	e2 f7       	brpl	.-8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     80c:	8c 2b       	or	r24, r28
     80e:	88 b9       	out	0x08, r24	; 8
		
		//check each column
		__checkColsHelper(row);
     810:	c8 01       	movw	r24, r16
     812:	0e 94 46 03 	call	0x68c	; 0x68c <__checkColsHelper>
		
		// set the row back to low
		ROW1to3_C_Off(1 << row);
     816:	88 b1       	in	r24, 0x08	; 8
     818:	c0 95       	com	r28
     81a:	c8 23       	and	r28, r24
     81c:	c8 b9       	out	0x08, r28	; 8
	ROW1to3_C_Off(ROW1_C | ROW2_C | ROW3_C);
	ROW4to5_D_Off(ROW4_D | ROW5_D);
	
	// go through each row, setting the output to 1, and seeing if any of the columns inputs are high
	// for rows 1 to 3, the pins on port C
	for (int row = 1; row <= 3; row++ )
     81e:	0f 5f       	subi	r16, 0xFF	; 255
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	04 30       	cpi	r16, 0x04	; 4
     824:	11 05       	cpc	r17, r1
     826:	4c f3       	brlt	.-46     	; 0x7fa <CheckButtons+0x52>
     828:	04 e0       	ldi	r16, 0x04	; 4
     82a:	10 e0       	ldi	r17, 0x00	; 0
     82c:	16 c0       	rjmp	.+44     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		ROW1to3_C_Off(1 << row);
	}
	// for rows 4 and 5, the pins on port D
	for (int row = 4; row <= 5; row++ )
	{
		ROW4to5_D_On(1 << (row - 2));
     82e:	8b b1       	in	r24, 0x0b	; 11
     830:	98 01       	movw	r18, r16
     832:	22 50       	subi	r18, 0x02	; 2
     834:	31 09       	sbc	r19, r1
     836:	c1 e0       	ldi	r28, 0x01	; 1
     838:	d0 e0       	ldi	r29, 0x00	; 0
     83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     83c:	cc 0f       	add	r28, r28
     83e:	dd 1f       	adc	r29, r29
     840:	2a 95       	dec	r18
     842:	e2 f7       	brpl	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     844:	8c 2b       	or	r24, r28
     846:	8b b9       	out	0x0b, r24	; 11
		
		//check each column
		__checkColsHelper(row);
     848:	c8 01       	movw	r24, r16
     84a:	0e 94 46 03 	call	0x68c	; 0x68c <__checkColsHelper>
		
		
		ROW4to5_D_Off(1 << (row - 2));
     84e:	8b b1       	in	r24, 0x0b	; 11
     850:	c0 95       	com	r28
     852:	c8 23       	and	r28, r24
     854:	cb b9       	out	0x0b, r28	; 11
		
		// set the row back to low
		ROW1to3_C_Off(1 << row);
	}
	// for rows 4 and 5, the pins on port D
	for (int row = 4; row <= 5; row++ )
     856:	0f 5f       	subi	r16, 0xFF	; 255
     858:	1f 4f       	sbci	r17, 0xFF	; 255
     85a:	06 30       	cpi	r16, 0x06	; 6
     85c:	11 05       	cpc	r17, r1
     85e:	3c f3       	brlt	.-50     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		
		ROW4to5_D_Off(1 << (row - 2));
	}
	
	// set rows back to high
	ROW1to3_C_On(ROW1_C | ROW2_C | ROW3_C);
     860:	88 b1       	in	r24, 0x08	; 8
     862:	8e 60       	ori	r24, 0x0E	; 14
     864:	88 b9       	out	0x08, r24	; 8
	ROW4to5_D_On(ROW4_D | ROW5_D);
     866:	8b b1       	in	r24, 0x0b	; 11
     868:	8c 60       	ori	r24, 0x0C	; 12
     86a:	8b b9       	out	0x0b, r24	; 11
	
	
	WasPressed = 1;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end>
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	08 95       	ret

0000087c <ReassignButtonCallback>:

// if you want the button to do something different midway through the application
void ReassignButtonCallback(void (*CallbackFunc)(int, int))
{
	// set global Callback function pointer to the one passed to us
	ButtonpressedCallback = *CallbackFunc;
     87c:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <ButtonpressedCallback+0x1>
     880:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <ButtonpressedCallback>
     884:	08 95       	ret

00000886 <Boardinit>:
		board[i] = i+2;// % 4;
	}

	totalPoints = 12;
	Level = 34;
	LevelPoints = 56;
     886:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <totalPoints+0x1>
     88a:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <totalPoints>
     88e:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <Level+0x1>
     892:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <Level>
     896:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <LevelPoints+0x1>
     89a:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <LevelPoints>
     89e:	0e 94 01 0a 	call	0x1402	; 0x1402 <initRandom>
     8a2:	08 95       	ret

000008a4 <GetArray_pt>:
     8a4:	87 e4       	ldi	r24, 0x47	; 71
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	08 95       	ret

000008aa <GetTotalPoints_pt>:
     8aa:	85 e4       	ldi	r24, 0x45	; 69
     8ac:	92 e0       	ldi	r25, 0x02	; 2
     8ae:	08 95       	ret

000008b0 <GetLevel_pt>:
     8b0:	83 e4       	ldi	r24, 0x43	; 67
     8b2:	92 e0       	ldi	r25, 0x02	; 2
     8b4:	08 95       	ret

000008b6 <GetLevelPoints_pt>:
     8b6:	81 e4       	ldi	r24, 0x41	; 65
     8b8:	92 e0       	ldi	r25, 0x02	; 2
     8ba:	08 95       	ret

000008bc <NewLevel>:
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <LevelPoints+0x1>
     8ce:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <LevelPoints>
     8d2:	85 ec       	ldi	r24, 0xC5	; 197
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 13 08 	call	0x1026	; 0x1026 <SCI0_TxString>
     8da:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <State>
     8de:	82 30       	cpi	r24, 0x02	; 2
     8e0:	91 f4       	brne	.+36     	; 0x906 <__stack+0x7>
     8e2:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <Level>
     8e6:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <Level+0x1>
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <Level+0x1>
     8f0:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <Level>
     8f4:	0a 97       	sbiw	r24, 0x0a	; 10
     8f6:	cc f0       	brlt	.+50     	; 0x92a <__stack+0x2b>
     8f8:	89 e0       	ldi	r24, 0x09	; 9
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <Level+0x1>
     900:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <Level>
     904:	12 c0       	rjmp	.+36     	; 0x92a <__stack+0x2b>
     906:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <Level>
     90a:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <Level+0x1>
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <Level+0x1>
     914:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <Level>
     918:	18 16       	cp	r1, r24
     91a:	19 06       	cpc	r1, r25
     91c:	34 f0       	brlt	.+12     	; 0x92a <__stack+0x2b>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <Level+0x1>
     926:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <Level>
     92a:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <Level>
     92e:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <Level+0x1>
     932:	c9 01       	movw	r24, r18
     934:	66 e0       	ldi	r22, 0x06	; 6
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	0e 94 31 0a 	call	0x1462	; 0x1462 <__divmodhi4>
     93c:	a9 01       	movw	r20, r18
     93e:	4c 5f       	subi	r20, 0xFC	; 252
     940:	5f 4f       	sbci	r21, 0xFF	; 255
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	49 30       	cpi	r20, 0x09	; 9
     946:	51 05       	cpc	r21, r1
     948:	08 f0       	brcs	.+2      	; 0x94c <__stack+0x4d>
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a9 01       	movw	r20, r18
     94e:	4b 5f       	subi	r20, 0xFB	; 251
     950:	5f 4f       	sbci	r21, 0xFF	; 255
     952:	e6 2e       	mov	r14, r22
     954:	ee 0c       	add	r14, r14
     956:	8e 2d       	mov	r24, r14
     958:	88 0f       	add	r24, r24
     95a:	88 0f       	add	r24, r24
     95c:	e8 0e       	add	r14, r24
     95e:	94 9f       	mul	r25, r20
     960:	e0 0c       	add	r14, r0
     962:	11 24       	eor	r1, r1
     964:	15 e0       	ldi	r17, 0x05	; 5
     966:	12 0f       	add	r17, r18
     968:	f1 2c       	mov	r15, r1
     96a:	b7 01       	movw	r22, r14
     96c:	8a ed       	ldi	r24, 0xDA	; 218
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	0e 94 20 08 	call	0x1040	; 0x1040 <qPrint>
     974:	61 2f       	mov	r22, r17
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	85 ee       	ldi	r24, 0xE5	; 229
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 20 08 	call	0x1040	; 0x1040 <qPrint>
     980:	c0 e0       	ldi	r28, 0x00	; 0
     982:	d0 e0       	ldi	r29, 0x00	; 0
     984:	05 c0       	rjmp	.+10     	; 0x990 <__stack+0x91>
     986:	fe 01       	movw	r30, r28
     988:	e9 5b       	subi	r30, 0xB9	; 185
     98a:	fd 4f       	sbci	r31, 0xFD	; 253
     98c:	10 82       	st	Z, r1
     98e:	21 96       	adiw	r28, 0x01	; 1
     990:	ce 15       	cp	r28, r14
     992:	df 05       	cpc	r29, r15
     994:	c4 f3       	brlt	.-16     	; 0x986 <__stack+0x87>
     996:	0d c0       	rjmp	.+26     	; 0x9b2 <__stack+0xb3>
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <GetRandomMax>
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	98 0f       	add	r25, r24
     9a4:	fe 01       	movw	r30, r28
     9a6:	e9 5b       	subi	r30, 0xB9	; 185
     9a8:	fd 4f       	sbci	r31, 0xFD	; 253
     9aa:	8e 5f       	subi	r24, 0xFE	; 254
     9ac:	80 83       	st	Z, r24
     9ae:	19 1b       	sub	r17, r25
     9b0:	21 96       	adiw	r28, 0x01	; 1
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	81 0f       	add	r24, r17
     9b6:	88 31       	cpi	r24, 0x18	; 24
     9b8:	78 f3       	brcs	.-34     	; 0x998 <__stack+0x99>
     9ba:	06 c0       	rjmp	.+12     	; 0x9c8 <__stack+0xc9>
     9bc:	fe 01       	movw	r30, r28
     9be:	e9 5b       	subi	r30, 0xB9	; 185
     9c0:	fd 4f       	sbci	r31, 0xFD	; 253
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	80 83       	st	Z, r24
     9c6:	21 96       	adiw	r28, 0x01	; 1
     9c8:	c9 31       	cpi	r28, 0x19	; 25
     9ca:	d1 05       	cpc	r29, r1
     9cc:	bc f3       	brlt	.-18     	; 0x9bc <__stack+0xbd>
     9ce:	c8 e1       	ldi	r28, 0x18	; 24
     9d0:	d0 e0       	ldi	r29, 0x00	; 0
     9d2:	0f c0       	rjmp	.+30     	; 0x9f2 <__stack+0xf3>
     9d4:	89 e1       	ldi	r24, 0x19	; 25
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 dd 09 	call	0x13ba	; 0x13ba <GetRandomMax>
     9dc:	de 01       	movw	r26, r28
     9de:	a9 5b       	subi	r26, 0xB9	; 185
     9e0:	bd 4f       	sbci	r27, 0xFD	; 253
     9e2:	2c 91       	ld	r18, X
     9e4:	fc 01       	movw	r30, r24
     9e6:	e9 5b       	subi	r30, 0xB9	; 185
     9e8:	fd 4f       	sbci	r31, 0xFD	; 253
     9ea:	80 81       	ld	r24, Z
     9ec:	8c 93       	st	X, r24
     9ee:	20 83       	st	Z, r18
     9f0:	21 97       	sbiw	r28, 0x01	; 1
     9f2:	1c 16       	cp	r1, r28
     9f4:	1d 06       	cpc	r1, r29
     9f6:	74 f3       	brlt	.-36     	; 0x9d4 <__stack+0xd5>
     9f8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <State>
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	ff 90       	pop	r15
     a04:	ef 90       	pop	r14
     a06:	08 95       	ret

00000a08 <IsWin>:
}


char IsWin()
{
	for (int i = 0; i < 25; i++)
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	0f c0       	rjmp	.+30     	; 0xa2c <IsWin+0x24>
	{
		// if the tile is a 2 or 3 and has not been revealed, the game is not over
		// return 0;
		if ((board[i] & ValueBits)  > 1 && !(board[i] & RevealedBit))
     a0e:	f9 01       	movw	r30, r18
     a10:	e9 5b       	subi	r30, 0xB9	; 185
     a12:	fd 4f       	sbci	r31, 0xFD	; 253
     a14:	40 81       	ld	r20, Z
     a16:	84 2f       	mov	r24, r20
     a18:	87 70       	andi	r24, 0x07	; 7
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	02 97       	sbiw	r24, 0x02	; 2
     a1e:	24 f0       	brlt	.+8      	; 0xa28 <IsWin+0x20>
     a20:	84 2f       	mov	r24, r20
     a22:	88 70       	andi	r24, 0x08	; 8
     a24:	43 ff       	sbrs	r20, 3
     a26:	06 c0       	rjmp	.+12     	; 0xa34 <IsWin+0x2c>
}


char IsWin()
{
	for (int i = 0; i < 25; i++)
     a28:	2f 5f       	subi	r18, 0xFF	; 255
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	29 31       	cpi	r18, 0x19	; 25
     a2e:	31 05       	cpc	r19, r1
     a30:	74 f3       	brlt	.-36     	; 0xa0e <IsWin+0x6>
		if ((board[i] & ValueBits)  > 1 && !(board[i] & RevealedBit))
			return 0;
	}
	
	// all point tiles have been revealed, game is won, return 1
	return 1;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	08 95       	ret

00000a36 <TryReveal>:
//		1 => smol change		(one tile)
//		2 => win/lose change	(one tile and indicate win/lose)
//		3 => big change			(Flip all of the tiles)
//		4 => New level
int TryReveal(int row, int col)
{
     a36:	9c 01       	movw	r18, r24
	// if the state  is win/lose:
	if (State == Win || State == Lose)
     a38:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <State>
     a3c:	91 30       	cpi	r25, 0x01	; 1
     a3e:	11 f0       	breq	.+4      	; 0xa44 <TryReveal+0xe>
     a40:	93 30       	cpi	r25, 0x03	; 3
     a42:	09 f5       	brne	.+66     	; 0xa86 <TryReveal+0x50>
	{
	//		- increment state
	//		- set all tiles to shown
	//		- return 3
		totalPoints += LevelPoints;
     a44:	40 91 45 02 	lds	r20, 0x0245	; 0x800245 <totalPoints>
     a48:	50 91 46 02 	lds	r21, 0x0246	; 0x800246 <totalPoints+0x1>
     a4c:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <LevelPoints>
     a50:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <LevelPoints+0x1>
     a54:	24 0f       	add	r18, r20
     a56:	35 1f       	adc	r19, r21
     a58:	30 93 46 02 	sts	0x0246, r19	; 0x800246 <totalPoints+0x1>
     a5c:	20 93 45 02 	sts	0x0245, r18	; 0x800245 <totalPoints>
		State++;
     a60:	9f 5f       	subi	r25, 0xFF	; 255
     a62:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <State>
		for (int i = 0; i < 25; i++)
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	07 c0       	rjmp	.+14     	; 0xa7a <TryReveal+0x44>
			board[i] |= RevealedBit;
     a6c:	fc 01       	movw	r30, r24
     a6e:	e9 5b       	subi	r30, 0xB9	; 185
     a70:	fd 4f       	sbci	r31, 0xFD	; 253
     a72:	20 81       	ld	r18, Z
     a74:	28 60       	ori	r18, 0x08	; 8
     a76:	20 83       	st	Z, r18
	//		- increment state
	//		- set all tiles to shown
	//		- return 3
		totalPoints += LevelPoints;
		State++;
		for (int i = 0; i < 25; i++)
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	89 31       	cpi	r24, 0x19	; 25
     a7c:	91 05       	cpc	r25, r1
     a7e:	b4 f3       	brlt	.-20     	; 0xa6c <TryReveal+0x36>
			board[i] |= RevealedBit;
		return 3;		
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	08 95       	ret
	}
	
	// if state is show_L or Show_W:
	if (State == Show_W || State == Show_L)
     a86:	92 30       	cpi	r25, 0x02	; 2
     a88:	11 f0       	breq	.+4      	; 0xa8e <TryReveal+0x58>
     a8a:	94 30       	cpi	r25, 0x04	; 4
     a8c:	29 f4       	brne	.+10     	; 0xa98 <TryReveal+0x62>
	{
	//		- call newlevel (it will change State to Playing)
	//		- return 3
		NewLevel();
     a8e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <NewLevel>
		return 4;
     a92:	84 e0       	ldi	r24, 0x04	; 4
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	08 95       	ret
	}
	
	// if the revealed bit at the given tile != 0 (already revealed)
	if ((Board(row, col) & RevealedBit) != 0)
     a98:	c9 01       	movw	r24, r18
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	28 0f       	add	r18, r24
     aa4:	39 1f       	adc	r19, r25
     aa6:	62 0f       	add	r22, r18
     aa8:	73 1f       	adc	r23, r19
     aaa:	fb 01       	movw	r30, r22
     aac:	e9 5b       	subi	r30, 0xB9	; 185
     aae:	fd 4f       	sbci	r31, 0xFD	; 253
     ab0:	80 81       	ld	r24, Z
     ab2:	83 fd       	sbrc	r24, 3
     ab4:	25 c0       	rjmp	.+74     	; 0xb00 <TryReveal+0xca>
	//		- return 0
		return 0;
	
	// change the bit to revealed
	Board(row, col) |= RevealedBit;
     ab6:	88 60       	ori	r24, 0x08	; 8
     ab8:	fb 01       	movw	r30, r22
     aba:	e9 5b       	subi	r30, 0xB9	; 185
     abc:	fd 4f       	sbci	r31, 0xFD	; 253
     abe:	80 83       	st	Z, r24
     ac0:	87 70       	andi	r24, 0x07	; 7
	// multiply level points by tile's value
	LevelPoints *= Board(row, col) & ValueBits;
     ac2:	40 91 41 02 	lds	r20, 0x0241	; 0x800241 <LevelPoints>
     ac6:	50 91 42 02 	lds	r21, 0x0242	; 0x800242 <LevelPoints+0x1>
     aca:	84 9f       	mul	r24, r20
     acc:	90 01       	movw	r18, r0
     ace:	85 9f       	mul	r24, r21
     ad0:	30 0d       	add	r19, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	30 93 42 02 	sts	0x0242, r19	; 0x800242 <LevelPoints+0x1>
     ad8:	20 93 41 02 	sts	0x0241, r18	; 0x800241 <LevelPoints>
	
	// if the given tile's value is 0 (ie a bomb)
	if (!(Board(row, col) & ValueBits))
     adc:	81 11       	cpse	r24, r1
     ade:	06 c0       	rjmp	.+12     	; 0xaec <TryReveal+0xb6>
	{
	//		- change state to lose
	//		- return 2
		State = Lose;
     ae0:	83 e0       	ldi	r24, 0x03	; 3
     ae2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <State>
		return 2;
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	08 95       	ret
	}
	
	// if IsWin() returns 1, indicating level was won:
	if (IsWin())
     aec:	0e 94 04 05 	call	0xa08	; 0xa08 <IsWin>
     af0:	88 23       	and	r24, r24
     af2:	49 f0       	breq	.+18     	; 0xb06 <TryReveal+0xd0>
	{
	//		- change state to Win
	//		- return 2
		State = Win;	
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <State>
		return 2;
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	08 95       	ret
	}
	
	// if the revealed bit at the given tile != 0 (already revealed)
	if ((Board(row, col) & RevealedBit) != 0)
	//		- return 0
		return 0;
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	08 95       	ret
		return 2;
	}
	
	// if it got to here, it's just a normal reveal,
	// return 1	
	return 1;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	90 e0       	ldi	r25, 0x00	; 0
}
     b0a:	08 95       	ret

00000b0c <GameInitUI>:
};


void GameInitUI()
{	
	SSD1306_Clear();
     b0c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <SSD1306_Clear>
	char row = 0;
	SSD1306_StringXY(0, row++, "Boom-Boom");
     b10:	4d e4       	ldi	r20, 0x4D	; 77
     b12:	51 e0       	ldi	r21, 0x01	; 1
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>
	row++;
	SSD1306_StringXY(0, row++, "Created by Johanna ");
     b1c:	4f ee       	ldi	r20, 0xEF	; 239
     b1e:	51 e0       	ldi	r21, 0x01	; 1
     b20:	62 e0       	ldi	r22, 0x02	; 2
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>
	SSD1306_StringXY(0, row++, "Shaw. Based off a");
     b28:	43 e0       	ldi	r20, 0x03	; 3
     b2a:	52 e0       	ldi	r21, 0x02	; 2
     b2c:	63 e0       	ldi	r22, 0x03	; 3
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>
	SSD1306_StringXY(0, row++, "Pokemon minigame");
     b34:	45 e1       	ldi	r20, 0x15	; 21
     b36:	52 e0       	ldi	r21, 0x02	; 2
     b38:	64 e0       	ldi	r22, 0x04	; 4
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>
	row++;
	SSD1306_StringXY(0, row++, "Press any button to");
     b40:	46 e2       	ldi	r20, 0x26	; 38
     b42:	52 e0       	ldi	r21, 0x02	; 2
     b44:	66 e0       	ldi	r22, 0x06	; 6
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>
	SSD1306_StringXY(0, row++, "begin");
     b4c:	4a e3       	ldi	r20, 0x3A	; 58
     b4e:	52 e0       	ldi	r21, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0e 94 bc 09 	call	0x1378	; 0x1378 <SSD1306_StringXY>

	
	SSD1306_Render();
     b58:	0e 94 bb 08 	call	0x1176	; 0x1176 <SSD1306_Render>
     b5c:	08 95       	ret

00000b5e <AddPxGrid>:
	//SSD1306_SetSpecPixel( px, iY + yStart, iX + xStart);
	#endif
	
	#ifdef LANDSCAPE_MODE
	// The pixel that the x and y plane start displaying at (AKA gird origin)
	iX += 65;
     b5e:	6f 5b       	subi	r22, 0xBF	; 191
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
	iY += 4;
     b62:	4c 5f       	subi	r20, 0xFC	; 252
     b64:	5f 4f       	sbci	r21, 0xFF	; 255
	//int xStart = 65;
	//int yStart = 2;
	//SSD1306_SetSpecPixel( px, iX + xStart, iY + yStart);
	#endif
	
	SSD1306_SetSpecPixel( px, iX, iY);
     b66:	0e 94 33 09 	call	0x1266	; 0x1266 <SSD1306_SetSpecPixel>
     b6a:	08 95       	ret

00000b6c <MakeGrid>:
}

void MakeGrid()
{
     b6c:	ef 92       	push	r14
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
	
	for (int i = 0; i < 6; i++)
     b78:	e1 2c       	mov	r14, r1
     b7a:	f1 2c       	mov	r15, r1
     b7c:	20 c0       	rjmp	.+64     	; 0xbbe <MakeGrid+0x52>
	{
		for (int j = 0; j < 50; j++)
		{
			// add col pixel
			//AddPxPortrait(1, i * 10, j);
			AddPxGrid(1, i * 10, j);
     b7e:	c7 01       	movw	r24, r14
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	87 01       	movw	r16, r14
     b8e:	00 0f       	add	r16, r16
     b90:	11 1f       	adc	r17, r17
     b92:	08 0f       	add	r16, r24
     b94:	19 1f       	adc	r17, r25
     b96:	ae 01       	movw	r20, r28
     b98:	b8 01       	movw	r22, r16
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	0e 94 af 05 	call	0xb5e	; 0xb5e <AddPxGrid>
			
			//add row pixel
			//AddPxPortrait(1, j, i * 10);
			AddPxGrid(1, j, i * 10);
     ba0:	a8 01       	movw	r20, r16
     ba2:	be 01       	movw	r22, r28
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	0e 94 af 05 	call	0xb5e	; 0xb5e <AddPxGrid>
void MakeGrid()
{
	
	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 50; j++)
     baa:	21 96       	adiw	r28, 0x01	; 1
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <MakeGrid+0x46>
     bae:	c0 e0       	ldi	r28, 0x00	; 0
     bb0:	d0 e0       	ldi	r29, 0x00	; 0
     bb2:	c2 33       	cpi	r28, 0x32	; 50
     bb4:	d1 05       	cpc	r29, r1
     bb6:	1c f3       	brlt	.-58     	; 0xb7e <MakeGrid+0x12>
}

void MakeGrid()
{
	
	for (int i = 0; i < 6; i++)
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	e8 1a       	sub	r14, r24
     bbc:	f8 0a       	sbc	r15, r24
     bbe:	86 e0       	ldi	r24, 0x06	; 6
     bc0:	e8 16       	cp	r14, r24
     bc2:	f1 04       	cpc	r15, r1
     bc4:	a4 f3       	brlt	.-24     	; 0xbae <MakeGrid+0x42>
			//add row pixel
			//AddPxPortrait(1, j, i * 10);
			AddPxGrid(1, j, i * 10);
		}
	}
} 
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	08 95       	ret

00000bd4 <ChangeTile>:


// will display a given symbol in the tile at the specified row and column
void ChangeTile(int row, int col, char symbol, char showing)
{
     bd4:	9f 92       	push	r9
     bd6:	af 92       	push	r10
     bd8:	bf 92       	push	r11
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
	if (symbol > 3)
     bea:	44 30       	cpi	r20, 0x04	; 4
     bec:	18 f0       	brcs	.+6      	; 0xbf4 <ChangeTile+0x20>
	{
		Indicator_Tog;
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	83 b9       	out	0x03, r24	; 3
		return;
     bf2:	61 c0       	rjmp	.+194    	; 0xcb6 <ChangeTile+0xe2>
     bf4:	92 2e       	mov	r9, r18
     bf6:	7b 01       	movw	r14, r22
     bf8:	8c 01       	movw	r16, r24
	}
		
	char *start = BigSymbols + symbol * 5;
     bfa:	84 2f       	mov	r24, r20
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	6c 01       	movw	r12, r24
     c00:	cc 0c       	add	r12, r12
     c02:	dd 1c       	adc	r13, r13
     c04:	cc 0c       	add	r12, r12
     c06:	dd 1c       	adc	r13, r13
     c08:	8c 0d       	add	r24, r12
     c0a:	9d 1d       	adc	r25, r13
     c0c:	9c 01       	movw	r18, r24
     c0e:	26 5e       	subi	r18, 0xE6	; 230
     c10:	3e 4f       	sbci	r19, 0xFE	; 254
     c12:	69 01       	movw	r12, r18
	for (int i = 0; i < 35; i++)
     c14:	a1 2c       	mov	r10, r1
     c16:	b1 2c       	mov	r11, r1
     c18:	49 c0       	rjmp	.+146    	; 0xcac <ChangeTile+0xd8>
	{
		
		//AddPxGrid( showing, (i % 5) + col* 10 + 3 , (i / 5) + row * 10 + 2);		// displays a shaded block where the symbol would go
		AddPxGrid( ( (*start >> (7 - (i % 8)) ) & 1 ) * showing, (i % 5) + col* 10 + 3 , (i / 5) + row * 10 + 2);
     c1a:	c5 01       	movw	r24, r10
     c1c:	65 e0       	ldi	r22, 0x05	; 5
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	0e 94 31 0a 	call	0x1462	; 0x1462 <__divmodhi4>
     c24:	98 01       	movw	r18, r16
     c26:	22 0f       	add	r18, r18
     c28:	33 1f       	adc	r19, r19
     c2a:	22 0f       	add	r18, r18
     c2c:	33 1f       	adc	r19, r19
     c2e:	22 0f       	add	r18, r18
     c30:	33 1f       	adc	r19, r19
     c32:	a8 01       	movw	r20, r16
     c34:	44 0f       	add	r20, r20
     c36:	55 1f       	adc	r21, r21
     c38:	42 0f       	add	r20, r18
     c3a:	53 1f       	adc	r21, r19
     c3c:	46 0f       	add	r20, r22
     c3e:	57 1f       	adc	r21, r23
     c40:	97 01       	movw	r18, r14
     c42:	22 0f       	add	r18, r18
     c44:	33 1f       	adc	r19, r19
     c46:	22 0f       	add	r18, r18
     c48:	33 1f       	adc	r19, r19
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	b7 01       	movw	r22, r14
     c50:	66 0f       	add	r22, r22
     c52:	77 1f       	adc	r23, r23
     c54:	62 0f       	add	r22, r18
     c56:	73 1f       	adc	r23, r19
     c58:	68 0f       	add	r22, r24
     c5a:	79 1f       	adc	r23, r25
     c5c:	d6 01       	movw	r26, r12
     c5e:	ec 91       	ld	r30, X
     c60:	e5 01       	movw	r28, r10
     c62:	c7 70       	andi	r28, 0x07	; 7
     c64:	d0 78       	andi	r29, 0x80	; 128
     c66:	dd 23       	and	r29, r29
     c68:	24 f4       	brge	.+8      	; 0xc72 <ChangeTile+0x9e>
     c6a:	21 97       	sbiw	r28, 0x01	; 1
     c6c:	c8 6f       	ori	r28, 0xF8	; 248
     c6e:	df 6f       	ori	r29, 0xFF	; 255
     c70:	21 96       	adiw	r28, 0x01	; 1
     c72:	87 e0       	ldi	r24, 0x07	; 7
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	8c 1b       	sub	r24, r28
     c78:	9d 0b       	sbc	r25, r29
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <ChangeTile+0xae>
     c7e:	f5 95       	asr	r31
     c80:	e7 95       	ror	r30
     c82:	8a 95       	dec	r24
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <ChangeTile+0xaa>
     c86:	4e 5f       	subi	r20, 0xFE	; 254
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	6d 5f       	subi	r22, 0xFD	; 253
     c8c:	7f 4f       	sbci	r23, 0xFF	; 255
     c8e:	8e 2f       	mov	r24, r30
     c90:	81 70       	andi	r24, 0x01	; 1
     c92:	89 9d       	mul	r24, r9
     c94:	80 2d       	mov	r24, r0
     c96:	11 24       	eor	r1, r1
     c98:	0e 94 af 05 	call	0xb5e	; 0xb5e <AddPxGrid>
		
		//if we're at the end of the byte, go to next
		if ( i % 8 == 7)
     c9c:	27 97       	sbiw	r28, 0x07	; 7
     c9e:	19 f4       	brne	.+6      	; 0xca6 <ChangeTile+0xd2>
			start++;
     ca0:	bf ef       	ldi	r27, 0xFF	; 255
     ca2:	cb 1a       	sub	r12, r27
     ca4:	db 0a       	sbc	r13, r27
		Indicator_Tog;
		return;
	}
		
	char *start = BigSymbols + symbol * 5;
	for (int i = 0; i < 35; i++)
     ca6:	2f ef       	ldi	r18, 0xFF	; 255
     ca8:	a2 1a       	sub	r10, r18
     caa:	b2 0a       	sbc	r11, r18
     cac:	33 e2       	ldi	r19, 0x23	; 35
     cae:	a3 16       	cp	r10, r19
     cb0:	b1 04       	cpc	r11, r1
     cb2:	0c f4       	brge	.+2      	; 0xcb6 <ChangeTile+0xe2>
     cb4:	b2 cf       	rjmp	.-156    	; 0xc1a <ChangeTile+0x46>
		
		//if we're at the end of the byte, go to next
		if ( i % 8 == 7)
			start++;
	}	
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	cf 90       	pop	r12
     cc6:	bf 90       	pop	r11
     cc8:	af 90       	pop	r10
     cca:	9f 90       	pop	r9
     ccc:	08 95       	ret

00000cce <SendSmolSymbol>:

void SendSmolSymbol(int xStart, int yStart, char Symbol)
{
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	6c 01       	movw	r12, r24
     ce4:	7b 01       	movw	r14, r22
	char *start = SmolSymbols + Symbol * 2;
     ce6:	04 2f       	mov	r16, r20
     ce8:	10 e0       	ldi	r17, 0x00	; 0
     cea:	00 0f       	add	r16, r16
     cec:	11 1f       	adc	r17, r17
     cee:	0a 5f       	subi	r16, 0xFA	; 250
     cf0:	1e 4f       	sbci	r17, 0xFE	; 254
	for (int i = 0; i < 15; i++)
     cf2:	a1 2c       	mov	r10, r1
     cf4:	b1 2c       	mov	r11, r1
     cf6:	2b c0       	rjmp	.+86     	; 0xd4e <SendSmolSymbol+0x80>
	{
			
		//AddPxGrid( showing, (i % 5) + col* 10 + 3 , (i / 5) + row * 10 + 2);		// displays a shaded block where the symbol would go
		//AddPxGrid( 1 , (i % 3) + xStart , (i / 3) + yStart);
		AddPxGrid( ( (*start >> (7 - (i % 8)) ) & 1 ), (i % 3) + xStart , (i / 3) + yStart);
     cf8:	c5 01       	movw	r24, r10
     cfa:	63 e0       	ldi	r22, 0x03	; 3
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	0e 94 31 0a 	call	0x1462	; 0x1462 <__divmodhi4>
     d02:	f8 01       	movw	r30, r16
     d04:	20 81       	ld	r18, Z
     d06:	e5 01       	movw	r28, r10
     d08:	c7 70       	andi	r28, 0x07	; 7
     d0a:	d0 78       	andi	r29, 0x80	; 128
     d0c:	dd 23       	and	r29, r29
     d0e:	24 f4       	brge	.+8      	; 0xd18 <SendSmolSymbol+0x4a>
     d10:	21 97       	sbiw	r28, 0x01	; 1
     d12:	c8 6f       	ori	r28, 0xF8	; 248
     d14:	df 6f       	ori	r29, 0xFF	; 255
     d16:	21 96       	adiw	r28, 0x01	; 1
     d18:	47 e0       	ldi	r20, 0x07	; 7
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	4c 1b       	sub	r20, r28
     d1e:	5d 0b       	sbc	r21, r29
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <SendSmolSymbol+0x5a>
     d24:	35 95       	asr	r19
     d26:	27 95       	ror	r18
     d28:	4a 95       	dec	r20
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <SendSmolSymbol+0x56>
     d2c:	ab 01       	movw	r20, r22
     d2e:	4e 0d       	add	r20, r14
     d30:	5f 1d       	adc	r21, r15
     d32:	bc 01       	movw	r22, r24
     d34:	6c 0d       	add	r22, r12
     d36:	7d 1d       	adc	r23, r13
     d38:	82 2f       	mov	r24, r18
     d3a:	81 70       	andi	r24, 0x01	; 1
     d3c:	0e 94 af 05 	call	0xb5e	; 0xb5e <AddPxGrid>
		//AddPxGrid( (*start >> (7 - (i % 8)) ) & 1 , (i % 3) + xStart , (i / 3) + yStart);
			
		//if we're at the end of the byte, go to next
		if ( i % 8 == 7)
     d40:	27 97       	sbiw	r28, 0x07	; 7
     d42:	11 f4       	brne	.+4      	; 0xd48 <SendSmolSymbol+0x7a>
		start++;
     d44:	0f 5f       	subi	r16, 0xFF	; 255
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
}

void SendSmolSymbol(int xStart, int yStart, char Symbol)
{
	char *start = SmolSymbols + Symbol * 2;
	for (int i = 0; i < 15; i++)
     d48:	ff ef       	ldi	r31, 0xFF	; 255
     d4a:	af 1a       	sub	r10, r31
     d4c:	bf 0a       	sbc	r11, r31
     d4e:	8f e0       	ldi	r24, 0x0F	; 15
     d50:	a8 16       	cp	r10, r24
     d52:	b1 04       	cpc	r11, r1
     d54:	8c f2       	brlt	.-94     	; 0xcf8 <SendSmolSymbol+0x2a>
		//if we're at the end of the byte, go to next
		if ( i % 8 == 7)
		start++;
	}
	
}
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	cf 90       	pop	r12
     d66:	bf 90       	pop	r11
     d68:	af 90       	pop	r10
     d6a:	08 95       	ret

00000d6c <DisplayPointSum>:

// used to display the point totals on the side of the grid
void DisplayPointSum(char value, int row, int col)
{	
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	08 2f       	mov	r16, r24
	// x is + 3 and + 7
	// y is + 5			
	SendSmolSymbol(col * 10 + 3 , row * 10 + 5, value / 10 );	// displays in the 10's spot	
     d7a:	eb 01       	movw	r28, r22
     d7c:	cc 0f       	add	r28, r28
     d7e:	dd 1f       	adc	r29, r29
     d80:	66 0f       	add	r22, r22
     d82:	77 1f       	adc	r23, r23
     d84:	66 0f       	add	r22, r22
     d86:	77 1f       	adc	r23, r23
     d88:	66 0f       	add	r22, r22
     d8a:	77 1f       	adc	r23, r23
     d8c:	c6 0f       	add	r28, r22
     d8e:	d7 1f       	adc	r29, r23
     d90:	25 96       	adiw	r28, 0x05	; 5
     d92:	7a 01       	movw	r14, r20
     d94:	ee 0c       	add	r14, r14
     d96:	ff 1c       	adc	r15, r15
     d98:	44 0f       	add	r20, r20
     d9a:	55 1f       	adc	r21, r21
     d9c:	44 0f       	add	r20, r20
     d9e:	55 1f       	adc	r21, r21
     da0:	44 0f       	add	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	e4 0e       	add	r14, r20
     da6:	f5 1e       	adc	r15, r21
     da8:	1d ec       	ldi	r17, 0xCD	; 205
     daa:	81 9f       	mul	r24, r17
     dac:	11 2d       	mov	r17, r1
     dae:	11 24       	eor	r1, r1
     db0:	16 95       	lsr	r17
     db2:	16 95       	lsr	r17
     db4:	16 95       	lsr	r17
     db6:	41 2f       	mov	r20, r17
     db8:	be 01       	movw	r22, r28
     dba:	c7 01       	movw	r24, r14
     dbc:	03 96       	adiw	r24, 0x03	; 3
     dbe:	0e 94 67 06 	call	0xcce	; 0xcce <SendSmolSymbol>
	SendSmolSymbol(col * 10 + 7 , row * 10 + 5, value % 10 );	// displays in the 1's spot	
     dc2:	11 0f       	add	r17, r17
     dc4:	81 2f       	mov	r24, r17
     dc6:	88 0f       	add	r24, r24
     dc8:	88 0f       	add	r24, r24
     dca:	18 0f       	add	r17, r24
     dcc:	40 2f       	mov	r20, r16
     dce:	41 1b       	sub	r20, r17
     dd0:	be 01       	movw	r22, r28
     dd2:	c7 01       	movw	r24, r14
     dd4:	07 96       	adiw	r24, 0x07	; 7
     dd6:	0e 94 67 06 	call	0xcce	; 0xcce <SendSmolSymbol>
}
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	08 95       	ret

00000de8 <DisplayBombLine>:


// Displays the number of bombs in a given row/column by means of ticks above the row/column point total
void DisplayBombLine(char bombs, int row, int col)
{
     de8:	9f 92       	push	r9
     dea:	af 92       	push	r10
     dec:	bf 92       	push	r11
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	98 2e       	mov	r9, r24
     e00:	5b 01       	movw	r10, r22
     e02:	6a 01       	movw	r12, r20
		//SendSmolSymbol(col * 10 + 3 , row * 10 + 5, value / 10 );	// displays in the 10's spot
		//SendSmolSymbol(col * 10 + 7 , row * 10 + 5, value % 10 );	// displays in the 1's spot
		//
		//AddPxGrid( ( (*start >> (7 - (i % 8)) ) & 1 ), (i % 3) + xStart , (i / 3) + yStart);
		
		for (int i = 1; i <= bombs; i++)
     e04:	ee 24       	eor	r14, r14
     e06:	e3 94       	inc	r14
     e08:	f1 2c       	mov	r15, r1
     e0a:	2e c0       	rjmp	.+92     	; 0xe68 <DisplayBombLine+0x80>
		{
			AddPxGrid(1, col * 10 + (i << 1), row * 10 + 2);
     e0c:	e5 01       	movw	r28, r10
     e0e:	cc 0f       	add	r28, r28
     e10:	dd 1f       	adc	r29, r29
     e12:	cc 0f       	add	r28, r28
     e14:	dd 1f       	adc	r29, r29
     e16:	cc 0f       	add	r28, r28
     e18:	dd 1f       	adc	r29, r29
     e1a:	c5 01       	movw	r24, r10
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	c8 0f       	add	r28, r24
     e22:	d9 1f       	adc	r29, r25
     e24:	c6 01       	movw	r24, r12
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	86 01       	movw	r16, r12
     e34:	00 0f       	add	r16, r16
     e36:	11 1f       	adc	r17, r17
     e38:	08 0f       	add	r16, r24
     e3a:	19 1f       	adc	r17, r25
     e3c:	c7 01       	movw	r24, r14
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	08 0f       	add	r16, r24
     e44:	19 1f       	adc	r17, r25
     e46:	ae 01       	movw	r20, r28
     e48:	4e 5f       	subi	r20, 0xFE	; 254
     e4a:	5f 4f       	sbci	r21, 0xFF	; 255
     e4c:	b8 01       	movw	r22, r16
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	0e 94 af 05 	call	0xb5e	; 0xb5e <AddPxGrid>
			AddPxGrid(1, col * 10 + (i << 1), row * 10 + 3);
     e54:	ae 01       	movw	r20, r28
     e56:	4d 5f       	subi	r20, 0xFD	; 253
     e58:	5f 4f       	sbci	r21, 0xFF	; 255
     e5a:	b8 01       	movw	r22, r16
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	0e 94 af 05 	call	0xb5e	; 0xb5e <AddPxGrid>
		//SendSmolSymbol(col * 10 + 3 , row * 10 + 5, value / 10 );	// displays in the 10's spot
		//SendSmolSymbol(col * 10 + 7 , row * 10 + 5, value % 10 );	// displays in the 1's spot
		//
		//AddPxGrid( ( (*start >> (7 - (i % 8)) ) & 1 ), (i % 3) + xStart , (i / 3) + yStart);
		
		for (int i = 1; i <= bombs; i++)
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	e8 1a       	sub	r14, r24
     e66:	f8 0a       	sbc	r15, r24
     e68:	89 2d       	mov	r24, r9
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	8e 15       	cp	r24, r14
     e6e:	9f 05       	cpc	r25, r15
     e70:	6c f6       	brge	.-102    	; 0xe0c <DisplayBombLine+0x24>
		{
			AddPxGrid(1, col * 10 + (i << 1), row * 10 + 2);
			AddPxGrid(1, col * 10 + (i << 1), row * 10 + 3);
		}
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	df 90       	pop	r13
     e80:	cf 90       	pop	r12
     e82:	bf 90       	pop	r11
     e84:	af 90       	pop	r10
     e86:	9f 90       	pop	r9
     e88:	08 95       	ret

00000e8a <I2C_Start>:
		while (TWCR & 0x10)
			;
	}

	return 0;
}
     e8a:	94 ea       	ldi	r25, 0xA4	; 164
     e8c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e90:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     e94:	99 23       	and	r25, r25
     e96:	e4 f7       	brge	.-8      	; 0xe90 <I2C_Start+0x6>
     e98:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     e9c:	98 7f       	andi	r25, 0xF8	; 248
     e9e:	98 30       	cpi	r25, 0x08	; 8
     ea0:	29 f0       	breq	.+10     	; 0xeac <I2C_Start+0x22>
     ea2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     ea6:	98 7f       	andi	r25, 0xF8	; 248
     ea8:	90 31       	cpi	r25, 0x10	; 16
     eaa:	49 f5       	brne	.+82     	; 0xefe <I2C_Start+0x74>
     eac:	67 2b       	or	r22, r23
     eae:	a9 f0       	breq	.+42     	; 0xeda <I2C_Start+0x50>
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	81 60       	ori	r24, 0x01	; 1
     eb8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     ebc:	84 e8       	ldi	r24, 0x84	; 132
     ebe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ec2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ec6:	88 23       	and	r24, r24
     ec8:	e4 f7       	brge	.-8      	; 0xec2 <I2C_Start+0x38>
     eca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     ece:	88 7f       	andi	r24, 0xF8	; 248
     ed0:	80 34       	cpi	r24, 0x40	; 64
     ed2:	c1 f0       	breq	.+48     	; 0xf04 <I2C_Start+0x7a>
     ed4:	8e ef       	ldi	r24, 0xFE	; 254
     ed6:	9f ef       	ldi	r25, 0xFF	; 255
     ed8:	08 95       	ret
     eda:	88 0f       	add	r24, r24
     edc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     ee0:	84 e8       	ldi	r24, 0x84	; 132
     ee2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ee6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     eea:	88 23       	and	r24, r24
     eec:	e4 f7       	brge	.-8      	; 0xee6 <I2C_Start+0x5c>
     eee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     ef2:	88 7f       	andi	r24, 0xF8	; 248
     ef4:	88 31       	cpi	r24, 0x18	; 24
     ef6:	49 f0       	breq	.+18     	; 0xf0a <I2C_Start+0x80>
     ef8:	8e ef       	ldi	r24, 0xFE	; 254
     efa:	9f ef       	ldi	r25, 0xFF	; 255
     efc:	08 95       	ret
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	9f ef       	ldi	r25, 0xFF	; 255
     f02:	08 95       	ret
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	08 95       	ret
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	08 95       	ret

00000f10 <I2C_Write8>:

// assumes transaction is open
int I2C_Write8 (unsigned char ucData, int bStop)
{
	// enter master write mode
	TWDR = ucData;
     f10:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

	// clear TWINT, no START, keep TWI enabled
	TWCR = 0b10000100;
     f14:	84 e8       	ldi	r24, 0x84	; 132
     f16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// look for data sent, with TWINT bit
	while (!(TWCR & 0x80))
     f1a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     f1e:	88 23       	and	r24, r24
     f20:	e4 f7       	brge	.-8      	; 0xf1a <I2C_Write8+0xa>
	  ;

	// look for data sent with ACK
	if ((TWSR & 0b11111000) != 0x28)
     f22:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     f26:	88 7f       	andi	r24, 0xF8	; 248
     f28:	88 32       	cpi	r24, 0x28	; 40
     f2a:	61 f4       	brne	.+24     	; 0xf44 <I2C_Write8+0x34>
	  return -3;
	
	// if stop requested, send it
	if (bStop)
     f2c:	67 2b       	or	r22, r23
     f2e:	69 f0       	breq	.+26     	; 0xf4a <I2C_Write8+0x3a>
	{
		// send STOP
		TWCR = 0b10010100;
     f30:	84 e9       	ldi	r24, 0x94	; 148
     f32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

		// wait for stop to automatically clear (stop completed)
		while (TWCR & 0x10)
     f36:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     f3a:	84 fd       	sbrc	r24, 4
     f3c:	fc cf       	rjmp	.-8      	; 0xf36 <I2C_Write8+0x26>
			;
	}

	return 0;
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	08 95       	ret
	while (!(TWCR & 0x80))
	  ;

	// look for data sent with ACK
	if ((TWSR & 0b11111000) != 0x28)
	  return -3;
     f44:	8d ef       	ldi	r24, 0xFD	; 253
     f46:	9f ef       	ldi	r25, 0xFF	; 255
     f48:	08 95       	ret
		// wait for stop to automatically clear (stop completed)
		while (TWCR & 0x10)
			;
	}

	return 0;
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
}
     f4e:	08 95       	ret

00000f50 <SCI0_Init>:
    *pData = UDR0;
    return 0;
  }
  
  return 1;
}
     f50:	cf 92       	push	r12
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	6b 01       	movw	r12, r22
     f5e:	7c 01       	movw	r14, r24
     f60:	cc 0c       	add	r12, r12
     f62:	dd 1c       	adc	r13, r13
     f64:	ee 1c       	adc	r14, r14
     f66:	ff 1c       	adc	r15, r15
     f68:	d7 01       	movw	r26, r14
     f6a:	c6 01       	movw	r24, r12
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	aa 1f       	adc	r26, r26
     f72:	bb 1f       	adc	r27, r27
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	aa 1f       	adc	r26, r26
     f7a:	bb 1f       	adc	r27, r27
     f7c:	8c 0d       	add	r24, r12
     f7e:	9d 1d       	adc	r25, r13
     f80:	ae 1d       	adc	r26, r14
     f82:	bf 1d       	adc	r27, r15
     f84:	bc 01       	movw	r22, r24
     f86:	cd 01       	movw	r24, r26
     f88:	68 94       	set
     f8a:	13 f8       	bld	r1, 3
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
     f90:	77 95       	ror	r23
     f92:	67 95       	ror	r22
     f94:	16 94       	lsr	r1
     f96:	d1 f7       	brne	.-12     	; 0xf8c <SCI0_Init+0x3c>
     f98:	0e 94 45 0a 	call	0x148a	; 0x148a <__udivmodsi4>
     f9c:	ca 01       	movw	r24, r20
     f9e:	b9 01       	movw	r22, r18
     fa0:	6b 5f       	subi	r22, 0xFB	; 251
     fa2:	7f 4f       	sbci	r23, 0xFF	; 255
     fa4:	8f 4f       	sbci	r24, 0xFF	; 255
     fa6:	9f 4f       	sbci	r25, 0xFF	; 255
     fa8:	2a e0       	ldi	r18, 0x0A	; 10
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	0e 94 45 0a 	call	0x148a	; 0x148a <__udivmodsi4>
     fb4:	21 50       	subi	r18, 0x01	; 1
     fb6:	31 09       	sbc	r19, r1
     fb8:	21 15       	cp	r18, r1
     fba:	80 e1       	ldi	r24, 0x10	; 16
     fbc:	38 07       	cpc	r19, r24
     fbe:	c8 f4       	brcc	.+50     	; 0xff2 <SCI0_Init+0xa2>
     fc0:	e4 e6       	ldi	r30, 0x64	; 100
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8d 7f       	andi	r24, 0xFD	; 253
     fc8:	80 83       	st	Z, r24
     fca:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     fce:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     fd2:	88 e1       	ldi	r24, 0x18	; 24
     fd4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     fd8:	86 e0       	ldi	r24, 0x06	; 6
     fda:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     fde:	01 2b       	or	r16, r17
     fe0:	59 f0       	breq	.+22     	; 0xff8 <SCI0_Init+0xa8>
     fe2:	e1 ec       	ldi	r30, 0xC1	; 193
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	80 68       	ori	r24, 0x80	; 128
     fea:	80 83       	st	Z, r24
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	05 c0       	rjmp	.+10     	; 0xffc <SCI0_Init+0xac>
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	9f ef       	ldi	r25, 0xFF	; 255
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <SCI0_Init+0xac>
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	ff 90       	pop	r15
    1002:	ef 90       	pop	r14
    1004:	df 90       	pop	r13
    1006:	cf 90       	pop	r12
    1008:	08 95       	ret

0000100a <SCI0_BSend>:
    100a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    100e:	95 ff       	sbrs	r25, 5
    1010:	fc cf       	rjmp	.-8      	; 0x100a <SCI0_BSend>
    1012:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1016:	96 ff       	sbrs	r25, 6
    1018:	03 c0       	rjmp	.+6      	; 0x1020 <SCI0_BSend+0x16>
    101a:	90 e4       	ldi	r25, 0x40	; 64
    101c:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1020:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1024:	08 95       	ret

00001026 <SCI0_TxString>:
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	ec 01       	movw	r28, r24
    102c:	03 c0       	rjmp	.+6      	; 0x1034 <SCI0_TxString+0xe>
    102e:	0e 94 05 08 	call	0x100a	; 0x100a <SCI0_BSend>
    1032:	21 96       	adiw	r28, 0x01	; 1
    1034:	88 81       	ld	r24, Y
    1036:	81 11       	cpse	r24, r1
    1038:	fa cf       	rjmp	.-12     	; 0x102e <SCI0_TxString+0x8>
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <qPrint>:


void qPrint(char * buff, int val)
{
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	6e 97       	sbiw	r28, 0x1e	; 30
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
	char output[30];
	
	
	sprintf(output, buff, val);
    1058:	7f 93       	push	r23
    105a:	6f 93       	push	r22
    105c:	9f 93       	push	r25
    105e:	8f 93       	push	r24
    1060:	8e 01       	movw	r16, r28
    1062:	0f 5f       	subi	r16, 0xFF	; 255
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	1f 93       	push	r17
    1068:	0f 93       	push	r16
    106a:	0e 94 45 0b 	call	0x168a	; 0x168a <sprintf>
	SCI0_TxString(output);
    106e:	c8 01       	movw	r24, r16
    1070:	0e 94 13 08 	call	0x1026	; 0x1026 <SCI0_TxString>
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	6e 96       	adiw	r28, 0x1e	; 30
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <SSD1306_Command8>:
    SSD1306_SetPixel((int)fXPos, (int)fYPos);
    
    fXPos += fXStep;
    fYPos += fYStep;
  }
}
    1096:	cf 93       	push	r28
    1098:	c8 2f       	mov	r28, r24
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	8c e3       	ldi	r24, 0x3C	; 60
    10a0:	0e 94 45 07 	call	0xe8a	; 0xe8a <I2C_Start>
    10a4:	89 2b       	or	r24, r25
    10a6:	61 f4       	brne	.+24     	; 0x10c0 <SSD1306_Command8+0x2a>
    10a8:	60 e0       	ldi	r22, 0x00	; 0
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	0e 94 88 07 	call	0xf10	; 0xf10 <I2C_Write8>
    10b2:	89 2b       	or	r24, r25
    10b4:	29 f4       	brne	.+10     	; 0x10c0 <SSD1306_Command8+0x2a>
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	8c 2f       	mov	r24, r28
    10bc:	0e 94 88 07 	call	0xf10	; 0xf10 <I2C_Write8>
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <SSD1306_Command16>:
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	c8 2f       	mov	r28, r24
    10ca:	d6 2f       	mov	r29, r22
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	8c e3       	ldi	r24, 0x3C	; 60
    10d2:	0e 94 45 07 	call	0xe8a	; 0xe8a <I2C_Start>
    10d6:	89 2b       	or	r24, r25
    10d8:	99 f4       	brne	.+38     	; 0x1100 <SSD1306_Command16+0x3c>
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	0e 94 88 07 	call	0xf10	; 0xf10 <I2C_Write8>
    10e4:	89 2b       	or	r24, r25
    10e6:	61 f4       	brne	.+24     	; 0x1100 <SSD1306_Command16+0x3c>
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	8c 2f       	mov	r24, r28
    10ee:	0e 94 88 07 	call	0xf10	; 0xf10 <I2C_Write8>
    10f2:	89 2b       	or	r24, r25
    10f4:	29 f4       	brne	.+10     	; 0x1100 <SSD1306_Command16+0x3c>
    10f6:	61 e0       	ldi	r22, 0x01	; 1
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	8d 2f       	mov	r24, r29
    10fc:	0e 94 88 07 	call	0xf10	; 0xf10 <I2C_Write8>
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <SSD1306_Data>:
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	8c 01       	movw	r16, r24
    1114:	7b 01       	movw	r14, r22
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	8c e3       	ldi	r24, 0x3C	; 60
    111c:	0e 94 45 07 	call	0xe8a	; 0xe8a <I2C_Start>
    1120:	89 2b       	or	r24, r25
    1122:	11 f5       	brne	.+68     	; 0x1168 <SSD1306_Data+0x62>
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	80 e4       	ldi	r24, 0x40	; 64
    112a:	0e 94 88 07 	call	0xf10	; 0xf10 <I2C_Write8>
    112e:	89 2b       	or	r24, r25
    1130:	d9 f4       	brne	.+54     	; 0x1168 <SSD1306_Data+0x62>
    1132:	c0 e0       	ldi	r28, 0x00	; 0
    1134:	d0 e0       	ldi	r29, 0x00	; 0
    1136:	0b c0       	rjmp	.+22     	; 0x114e <SSD1306_Data+0x48>
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	f8 01       	movw	r30, r16
    113e:	ec 0f       	add	r30, r28
    1140:	fd 1f       	adc	r31, r29
    1142:	80 81       	ld	r24, Z
    1144:	0e 94 88 07 	call	0xf10	; 0xf10 <I2C_Write8>
    1148:	89 2b       	or	r24, r25
    114a:	71 f4       	brne	.+28     	; 0x1168 <SSD1306_Data+0x62>
    114c:	21 96       	adiw	r28, 0x01	; 1
    114e:	c7 01       	movw	r24, r14
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	c8 17       	cp	r28, r24
    1154:	d9 07       	cpc	r29, r25
    1156:	80 f3       	brcs	.-32     	; 0x1138 <SSD1306_Data+0x32>
    1158:	f8 01       	movw	r30, r16
    115a:	e8 0f       	add	r30, r24
    115c:	f9 1f       	adc	r31, r25
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	0e 94 88 07 	call	0xf10	; 0xf10 <I2C_Write8>
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	08 95       	ret

00001176 <SSD1306_Render>:
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	0e 94 4b 08 	call	0x1096	; 0x1096 <SSD1306_Command8>
    1180:	80 e1       	ldi	r24, 0x10	; 16
    1182:	0e 94 4b 08 	call	0x1096	; 0x1096 <SSD1306_Command8>
    1186:	c0 e0       	ldi	r28, 0x00	; 0
    1188:	d0 e0       	ldi	r29, 0x00	; 0
    118a:	1b c0       	rjmp	.+54     	; 0x11c2 <SSD1306_Render+0x4c>
    118c:	fe 01       	movw	r30, r28
    118e:	e0 5a       	subi	r30, 0xA0	; 160
    1190:	fd 4f       	sbci	r31, 0xFD	; 253
    1192:	80 81       	ld	r24, Z
    1194:	88 23       	and	r24, r24
    1196:	a1 f0       	breq	.+40     	; 0x11c0 <SSD1306_Render+0x4a>
    1198:	fe 01       	movw	r30, r28
    119a:	e0 5a       	subi	r30, 0xA0	; 160
    119c:	fd 4f       	sbci	r31, 0xFD	; 253
    119e:	10 82       	st	Z, r1
    11a0:	8c 2f       	mov	r24, r28
    11a2:	80 55       	subi	r24, 0x50	; 80
    11a4:	0e 94 4b 08 	call	0x1096	; 0x1096 <SSD1306_Command8>
    11a8:	60 e8       	ldi	r22, 0x80	; 128
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	ce 01       	movw	r24, r28
    11ae:	96 95       	lsr	r25
    11b0:	98 2f       	mov	r25, r24
    11b2:	88 27       	eor	r24, r24
    11b4:	97 95       	ror	r25
    11b6:	87 95       	ror	r24
    11b8:	88 59       	subi	r24, 0x98	; 152
    11ba:	9d 4f       	sbci	r25, 0xFD	; 253
    11bc:	0e 94 83 08 	call	0x1106	; 0x1106 <SSD1306_Data>
    11c0:	21 96       	adiw	r28, 0x01	; 1
    11c2:	c8 30       	cpi	r28, 0x08	; 8
    11c4:	d1 05       	cpc	r29, r1
    11c6:	14 f3       	brlt	.-60     	; 0x118c <SSD1306_Render+0x16>
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <SSD1306_Clear>:
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <SSD1306_Clear+0x10>
    11d4:	fc 01       	movw	r30, r24
    11d6:	e8 59       	subi	r30, 0x98	; 152
    11d8:	fd 4f       	sbci	r31, 0xFD	; 253
    11da:	10 82       	st	Z, r1
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	81 15       	cp	r24, r1
    11e0:	24 e0       	ldi	r18, 0x04	; 4
    11e2:	92 07       	cpc	r25, r18
    11e4:	bc f3       	brlt	.-18     	; 0x11d4 <SSD1306_Clear+0x6>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	06 c0       	rjmp	.+12     	; 0x11f8 <SSD1306_Clear+0x2a>
    11ec:	fc 01       	movw	r30, r24
    11ee:	e0 5a       	subi	r30, 0xA0	; 160
    11f0:	fd 4f       	sbci	r31, 0xFD	; 253
    11f2:	21 e0       	ldi	r18, 0x01	; 1
    11f4:	20 83       	st	Z, r18
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	88 30       	cpi	r24, 0x08	; 8
    11fa:	91 05       	cpc	r25, r1
    11fc:	bc f3       	brlt	.-18     	; 0x11ec <SSD1306_Clear+0x1e>
    11fe:	0e 94 bb 08 	call	0x1176	; 0x1176 <SSD1306_Render>
    1202:	08 95       	ret

00001204 <SSD1306_DispInit>:
    1204:	6f eb       	ldi	r22, 0xBF	; 191
    1206:	88 ea       	ldi	r24, 0xA8	; 168
    1208:	0e 94 62 08 	call	0x10c4	; 0x10c4 <SSD1306_Command16>
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	83 ed       	ldi	r24, 0xD3	; 211
    1210:	0e 94 62 08 	call	0x10c4	; 0x10c4 <SSD1306_Command16>
    1214:	80 e4       	ldi	r24, 0x40	; 64
    1216:	0e 94 4b 08 	call	0x1096	; 0x1096 <SSD1306_Command8>
    121a:	80 ea       	ldi	r24, 0xA0	; 160
    121c:	0e 94 4b 08 	call	0x1096	; 0x1096 <SSD1306_Command8>
    1220:	80 ec       	ldi	r24, 0xC0	; 192
    1222:	0e 94 4b 08 	call	0x1096	; 0x1096 <SSD1306_Command8>
    1226:	62 e1       	ldi	r22, 0x12	; 18
    1228:	8a ed       	ldi	r24, 0xDA	; 218
    122a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <SSD1306_Command16>
    122e:	6f e7       	ldi	r22, 0x7F	; 127
    1230:	81 e8       	ldi	r24, 0x81	; 129
    1232:	0e 94 62 08 	call	0x10c4	; 0x10c4 <SSD1306_Command16>
    1236:	84 ea       	ldi	r24, 0xA4	; 164
    1238:	0e 94 4b 08 	call	0x1096	; 0x1096 <SSD1306_Command8>
    123c:	86 ea       	ldi	r24, 0xA6	; 166
    123e:	0e 94 4b 08 	call	0x1096	; 0x1096 <SSD1306_Command8>
    1242:	60 e8       	ldi	r22, 0x80	; 128
    1244:	85 ed       	ldi	r24, 0xD5	; 213
    1246:	0e 94 62 08 	call	0x10c4	; 0x10c4 <SSD1306_Command16>
    124a:	64 e1       	ldi	r22, 0x14	; 20
    124c:	8d e8       	ldi	r24, 0x8D	; 141
    124e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <SSD1306_Command16>
    1252:	8f ea       	ldi	r24, 0xAF	; 175
    1254:	0e 94 4b 08 	call	0x1096	; 0x1096 <SSD1306_Command8>
    1258:	62 e0       	ldi	r22, 0x02	; 2
    125a:	80 e2       	ldi	r24, 0x20	; 32
    125c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <SSD1306_Command16>
    1260:	0e 94 e7 08 	call	0x11ce	; 0x11ce <SSD1306_Clear>
    1264:	08 95       	ret

00001266 <SSD1306_SetSpecPixel>:
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	60 38       	cpi	r22, 0x80	; 128
    126c:	71 05       	cpc	r23, r1
    126e:	f0 f5       	brcc	.+124    	; 0x12ec <SSD1306_SetSpecPixel+0x86>
    1270:	40 34       	cpi	r20, 0x40	; 64
    1272:	51 05       	cpc	r21, r1
    1274:	d8 f5       	brcc	.+118    	; 0x12ec <SSD1306_SetSpecPixel+0x86>
    1276:	9a 01       	movw	r18, r20
    1278:	55 23       	and	r21, r21
    127a:	14 f4       	brge	.+4      	; 0x1280 <SSD1306_SetSpecPixel+0x1a>
    127c:	29 5f       	subi	r18, 0xF9	; 249
    127e:	3f 4f       	sbci	r19, 0xFF	; 255
    1280:	35 95       	asr	r19
    1282:	27 95       	ror	r18
    1284:	35 95       	asr	r19
    1286:	27 95       	ror	r18
    1288:	35 95       	asr	r19
    128a:	27 95       	ror	r18
    128c:	f9 01       	movw	r30, r18
    128e:	f6 95       	lsr	r31
    1290:	fe 2f       	mov	r31, r30
    1292:	ee 27       	eor	r30, r30
    1294:	f7 95       	ror	r31
    1296:	e7 95       	ror	r30
    1298:	6e 0f       	add	r22, r30
    129a:	7f 1f       	adc	r23, r31
    129c:	fb 01       	movw	r30, r22
    129e:	e8 59       	subi	r30, 0x98	; 152
    12a0:	fd 4f       	sbci	r31, 0xFD	; 253
    12a2:	a0 81       	ld	r26, Z
    12a4:	47 70       	andi	r20, 0x07	; 7
    12a6:	50 78       	andi	r21, 0x80	; 128
    12a8:	55 23       	and	r21, r21
    12aa:	34 f4       	brge	.+12     	; 0x12b8 <SSD1306_SetSpecPixel+0x52>
    12ac:	41 50       	subi	r20, 0x01	; 1
    12ae:	51 09       	sbc	r21, r1
    12b0:	48 6f       	ori	r20, 0xF8	; 248
    12b2:	5f 6f       	ori	r21, 0xFF	; 255
    12b4:	4f 5f       	subi	r20, 0xFF	; 255
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
    12b8:	e1 e0       	ldi	r30, 0x01	; 1
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	04 2e       	mov	r0, r20
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <SSD1306_SetSpecPixel+0x5e>
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <SSD1306_SetSpecPixel+0x5a>
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <SSD1306_SetSpecPixel+0x6a>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	4a 95       	dec	r20
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <SSD1306_SetSpecPixel+0x66>
    12d4:	eb 01       	movw	r28, r22
    12d6:	c8 59       	subi	r28, 0x98	; 152
    12d8:	dd 4f       	sbci	r29, 0xFD	; 253
    12da:	e0 95       	com	r30
    12dc:	ea 23       	and	r30, r26
    12de:	8e 2b       	or	r24, r30
    12e0:	88 83       	st	Y, r24
    12e2:	f9 01       	movw	r30, r18
    12e4:	e0 5a       	subi	r30, 0xA0	; 160
    12e6:	fd 4f       	sbci	r31, 0xFD	; 253
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	80 83       	st	Z, r24
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <SSD1306_CharXY>:

#ifdef _SSD1306_DisplaySize128x64
// target locations are aligned to stops of 6 on the x, and 8 on the y, with 5 x 7 characters
void SSD1306_CharXY (unsigned char iX, unsigned char iY, char disp)
{
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
  // ensure axes in range, could be called with automation, so no error, just fix
  iX = iX % 22;
    12f6:	98 2f       	mov	r25, r24
    12f8:	96 95       	lsr	r25
    12fa:	2b eb       	ldi	r18, 0xBB	; 187
    12fc:	92 9f       	mul	r25, r18
    12fe:	91 2d       	mov	r25, r1
    1300:	11 24       	eor	r1, r1
    1302:	96 95       	lsr	r25
    1304:	96 95       	lsr	r25
    1306:	96 95       	lsr	r25
    1308:	26 e1       	ldi	r18, 0x16	; 22
    130a:	92 9f       	mul	r25, r18
    130c:	80 19       	sub	r24, r0
    130e:	11 24       	eor	r1, r1
    1310:	98 2f       	mov	r25, r24
  iY = iY % 8;
    1312:	67 70       	andi	r22, 0x07	; 7
  
  // keep display character in range or show as space
  if (disp < 31 || disp > 126)
    1314:	81 ee       	ldi	r24, 0xE1	; 225
    1316:	84 0f       	add	r24, r20
    1318:	80 36       	cpi	r24, 0x60	; 96
    131a:	08 f0       	brcs	.+2      	; 0x131e <SSD1306_CharXY+0x2c>
    disp = ' ';
    131c:	40 e2       	ldi	r20, 0x20	; 32
  
  // figure out where in the buffer this is
  int iStartIndex = iX * 6 + iY * 128;
    131e:	89 2f       	mov	r24, r25
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9c 01       	movw	r18, r24
    1324:	22 0f       	add	r18, r18
    1326:	33 1f       	adc	r19, r19
    1328:	82 0f       	add	r24, r18
    132a:	93 1f       	adc	r25, r19
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	c6 2f       	mov	r28, r22
    1332:	d0 e0       	ldi	r29, 0x00	; 0
    1334:	9e 01       	movw	r18, r28
    1336:	36 95       	lsr	r19
    1338:	32 2f       	mov	r19, r18
    133a:	22 27       	eor	r18, r18
    133c:	37 95       	ror	r19
    133e:	27 95       	ror	r18
    1340:	82 0f       	add	r24, r18
    1342:	93 1f       	adc	r25, r19
    //_DispBuff[iStartIndex++] = _CharMap [(disp - 31) * 5 + i]; // need to adjust to use full map
    // writing it this way does not appear to be necessary as the array type above is known
  //  _DispBuff[iStartIndex++] = *(const __flash unsigned char *)(_CharMap + ((disp - 31) * 5 + i)); // need to adjust to use full map
  
  // updated when switched to basic AVR code, uses program memory copy function to copy from flash
  memcpy_P (_DispBuff + iStartIndex, _CharMap + (disp - 31) * 5, 5);
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	4f 51       	subi	r20, 0x1F	; 31
    1348:	51 09       	sbc	r21, r1
    134a:	ba 01       	movw	r22, r20
    134c:	66 0f       	add	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	66 0f       	add	r22, r22
    1352:	77 1f       	adc	r23, r23
    1354:	46 0f       	add	r20, r22
    1356:	57 1f       	adc	r21, r23
    1358:	ba 01       	movw	r22, r20
    135a:	68 59       	subi	r22, 0x98	; 152
    135c:	7f 4f       	sbci	r23, 0xFF	; 255
    135e:	45 e0       	ldi	r20, 0x05	; 5
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	88 59       	subi	r24, 0x98	; 152
    1364:	9d 4f       	sbci	r25, 0xFD	; 253
    1366:	0e 94 3c 0b 	call	0x1678	; 0x1678 <memcpy_P>
  
  // mark affected page as dirty
  _DispDirty[iY] = 1;
    136a:	c0 5a       	subi	r28, 0xA0	; 160
    136c:	dd 4f       	sbci	r29, 0xFD	; 253
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	88 83       	st	Y, r24
}
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <SSD1306_StringXY>:
  _DispDirty[iY] = 1;
}
#endif

void SSD1306_StringXY (unsigned char iX, unsigned char iY, char * pStr)
{
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	c8 2f       	mov	r28, r24
    1382:	d6 2f       	mov	r29, r22
    1384:	8a 01       	movw	r16, r20
  while (*pStr)
    1386:	10 c0       	rjmp	.+32     	; 0x13a8 <SSD1306_StringXY+0x30>
  {
    // dump the current character to the display
    SSD1306_CharXY(iX, iY, *pStr);
    1388:	6d 2f       	mov	r22, r29
    138a:	8c 2f       	mov	r24, r28
    138c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <SSD1306_CharXY>
    
    // move to the next character
    pStr = pStr + 1;
    1390:	0f 5f       	subi	r16, 0xFF	; 255
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    
    // do row and column wrapping
    if (++iX > 20)
    1394:	cf 5f       	subi	r28, 0xFF	; 255
    1396:	c5 31       	cpi	r28, 0x15	; 21
    1398:	38 f0       	brcs	.+14     	; 0x13a8 <SSD1306_StringXY+0x30>
    {
      iX=0;
      if (++iY > 7)
    139a:	df 5f       	subi	r29, 0xFF	; 255
    139c:	d8 30       	cpi	r29, 0x08	; 8
    139e:	10 f4       	brcc	.+4      	; 0x13a4 <SSD1306_StringXY+0x2c>
    pStr = pStr + 1;
    
    // do row and column wrapping
    if (++iX > 20)
    {
      iX=0;
    13a0:	c0 e0       	ldi	r28, 0x00	; 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <SSD1306_StringXY+0x30>
      if (++iY > 7)
        iY=0;
    13a4:	d0 e0       	ldi	r29, 0x00	; 0
    pStr = pStr + 1;
    
    // do row and column wrapping
    if (++iX > 20)
    {
      iX=0;
    13a6:	c0 e0       	ldi	r28, 0x00	; 0
}
#endif

void SSD1306_StringXY (unsigned char iX, unsigned char iY, char * pStr)
{
  while (*pStr)
    13a8:	f8 01       	movw	r30, r16
    13aa:	40 81       	ld	r20, Z
    13ac:	41 11       	cpse	r20, r1
    13ae:	ec cf       	rjmp	.-40     	; 0x1388 <SSD1306_StringXY+0x10>
      iX=0;
      if (++iY > 7)
        iY=0;
    }
  }
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	08 95       	ret

000013ba <GetRandomMax>:
}

int GetRandomMinMax(int min, int max)
{
	return random() % (max - min) + min;
}
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	ec 01       	movw	r28, r24
    13c0:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <random>
    13c4:	9e 01       	movw	r18, r28
    13c6:	dd 0f       	add	r29, r29
    13c8:	44 0b       	sbc	r20, r20
    13ca:	55 0b       	sbc	r21, r21
    13cc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__divmodsi4>
    13d0:	cb 01       	movw	r24, r22
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret

000013d8 <EEPROM_write>:


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
    13d8:	f9 99       	sbic	0x1f, 1	; 31
    13da:	fe cf       	rjmp	.-4      	; 0x13d8 <EEPROM_write>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
    13dc:	92 bd       	out	0x22, r25	; 34
    13de:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
    13e0:	60 bd       	out	0x20, r22	; 32
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
    13e2:	8f b3       	in	r24, 0x1f	; 31
    13e4:	84 60       	ori	r24, 0x04	; 4
    13e6:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
    13e8:	8f b3       	in	r24, 0x1f	; 31
    13ea:	82 60       	ori	r24, 0x02	; 2
    13ec:	8f bb       	out	0x1f, r24	; 31
    13ee:	08 95       	ret

000013f0 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
    13f0:	f9 99       	sbic	0x1f, 1	; 31
    13f2:	fe cf       	rjmp	.-4      	; 0x13f0 <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
    13f4:	92 bd       	out	0x22, r25	; 34
    13f6:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    13f8:	8f b3       	in	r24, 0x1f	; 31
    13fa:	81 60       	ori	r24, 0x01	; 1
    13fc:	8f bb       	out	0x1f, r24	; 31
	/* Return data from Data Register */
	return EEDR;
    13fe:	80 b5       	in	r24, 0x20	; 32
}
    1400:	08 95       	ret

00001402 <initRandom>:

// initializes the random function used to create new games, 
// the seed used is taken from memory, used as a seed, and then a new random number is selected and replaces the seed
// therefore insuring that it will be different each time
void initRandom()
{
    1402:	cf 92       	push	r12
    1404:	df 92       	push	r13
    1406:	ef 92       	push	r14
    1408:	ff 92       	push	r15
	srandom((long)EEPROM_read(addStart) + (((long)EEPROM_read(addStart + 1)) << 8));
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <EEPROM_read>
    1412:	c8 2e       	mov	r12, r24
    1414:	d1 2c       	mov	r13, r1
    1416:	e1 2c       	mov	r14, r1
    1418:	f1 2c       	mov	r15, r1
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <EEPROM_read>
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a0 e0       	ldi	r26, 0x00	; 0
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ba 2f       	mov	r27, r26
    142a:	a9 2f       	mov	r26, r25
    142c:	98 2f       	mov	r25, r24
    142e:	88 27       	eor	r24, r24
    1430:	bc 01       	movw	r22, r24
    1432:	cd 01       	movw	r24, r26
    1434:	6c 0d       	add	r22, r12
    1436:	7d 1d       	adc	r23, r13
    1438:	8e 1d       	adc	r24, r14
    143a:	9f 1d       	adc	r25, r15
    143c:	0e 94 33 0b 	call	0x1666	; 0x1666 <srandom>
	int temp = (int)random();
    1440:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <random>
    1444:	f7 2e       	mov	r15, r23
	EEPROM_write(addStart, (char)temp);
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <EEPROM_write>
	EEPROM_write(addStart + 1, (char)(temp >> 8));
    144e:	6f 2d       	mov	r22, r15
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <EEPROM_write>
}
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	df 90       	pop	r13
    145e:	cf 90       	pop	r12
    1460:	08 95       	ret

00001462 <__divmodhi4>:
    1462:	97 fb       	bst	r25, 7
    1464:	07 2e       	mov	r0, r23
    1466:	16 f4       	brtc	.+4      	; 0x146c <__divmodhi4+0xa>
    1468:	00 94       	com	r0
    146a:	07 d0       	rcall	.+14     	; 0x147a <__divmodhi4_neg1>
    146c:	77 fd       	sbrc	r23, 7
    146e:	09 d0       	rcall	.+18     	; 0x1482 <__divmodhi4_neg2>
    1470:	0e 94 86 0a 	call	0x150c	; 0x150c <__udivmodhi4>
    1474:	07 fc       	sbrc	r0, 7
    1476:	05 d0       	rcall	.+10     	; 0x1482 <__divmodhi4_neg2>
    1478:	3e f4       	brtc	.+14     	; 0x1488 <__divmodhi4_exit>

0000147a <__divmodhi4_neg1>:
    147a:	90 95       	com	r25
    147c:	81 95       	neg	r24
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	08 95       	ret

00001482 <__divmodhi4_neg2>:
    1482:	70 95       	com	r23
    1484:	61 95       	neg	r22
    1486:	7f 4f       	sbci	r23, 0xFF	; 255

00001488 <__divmodhi4_exit>:
    1488:	08 95       	ret

0000148a <__udivmodsi4>:
    148a:	a1 e2       	ldi	r26, 0x21	; 33
    148c:	1a 2e       	mov	r1, r26
    148e:	aa 1b       	sub	r26, r26
    1490:	bb 1b       	sub	r27, r27
    1492:	fd 01       	movw	r30, r26
    1494:	0d c0       	rjmp	.+26     	; 0x14b0 <__udivmodsi4_ep>

00001496 <__udivmodsi4_loop>:
    1496:	aa 1f       	adc	r26, r26
    1498:	bb 1f       	adc	r27, r27
    149a:	ee 1f       	adc	r30, r30
    149c:	ff 1f       	adc	r31, r31
    149e:	a2 17       	cp	r26, r18
    14a0:	b3 07       	cpc	r27, r19
    14a2:	e4 07       	cpc	r30, r20
    14a4:	f5 07       	cpc	r31, r21
    14a6:	20 f0       	brcs	.+8      	; 0x14b0 <__udivmodsi4_ep>
    14a8:	a2 1b       	sub	r26, r18
    14aa:	b3 0b       	sbc	r27, r19
    14ac:	e4 0b       	sbc	r30, r20
    14ae:	f5 0b       	sbc	r31, r21

000014b0 <__udivmodsi4_ep>:
    14b0:	66 1f       	adc	r22, r22
    14b2:	77 1f       	adc	r23, r23
    14b4:	88 1f       	adc	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	1a 94       	dec	r1
    14ba:	69 f7       	brne	.-38     	; 0x1496 <__udivmodsi4_loop>
    14bc:	60 95       	com	r22
    14be:	70 95       	com	r23
    14c0:	80 95       	com	r24
    14c2:	90 95       	com	r25
    14c4:	9b 01       	movw	r18, r22
    14c6:	ac 01       	movw	r20, r24
    14c8:	bd 01       	movw	r22, r26
    14ca:	cf 01       	movw	r24, r30
    14cc:	08 95       	ret

000014ce <__divmodsi4>:
    14ce:	05 2e       	mov	r0, r21
    14d0:	97 fb       	bst	r25, 7
    14d2:	1e f4       	brtc	.+6      	; 0x14da <__divmodsi4+0xc>
    14d4:	00 94       	com	r0
    14d6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__negsi2>
    14da:	57 fd       	sbrc	r21, 7
    14dc:	07 d0       	rcall	.+14     	; 0x14ec <__divmodsi4_neg2>
    14de:	0e 94 45 0a 	call	0x148a	; 0x148a <__udivmodsi4>
    14e2:	07 fc       	sbrc	r0, 7
    14e4:	03 d0       	rcall	.+6      	; 0x14ec <__divmodsi4_neg2>
    14e6:	4e f4       	brtc	.+18     	; 0x14fa <__divmodsi4_exit>
    14e8:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__negsi2>

000014ec <__divmodsi4_neg2>:
    14ec:	50 95       	com	r21
    14ee:	40 95       	com	r20
    14f0:	30 95       	com	r19
    14f2:	21 95       	neg	r18
    14f4:	3f 4f       	sbci	r19, 0xFF	; 255
    14f6:	4f 4f       	sbci	r20, 0xFF	; 255
    14f8:	5f 4f       	sbci	r21, 0xFF	; 255

000014fa <__divmodsi4_exit>:
    14fa:	08 95       	ret

000014fc <__negsi2>:
    14fc:	90 95       	com	r25
    14fe:	80 95       	com	r24
    1500:	70 95       	com	r23
    1502:	61 95       	neg	r22
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	8f 4f       	sbci	r24, 0xFF	; 255
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	08 95       	ret

0000150c <__udivmodhi4>:
    150c:	aa 1b       	sub	r26, r26
    150e:	bb 1b       	sub	r27, r27
    1510:	51 e1       	ldi	r21, 0x11	; 17
    1512:	07 c0       	rjmp	.+14     	; 0x1522 <__udivmodhi4_ep>

00001514 <__udivmodhi4_loop>:
    1514:	aa 1f       	adc	r26, r26
    1516:	bb 1f       	adc	r27, r27
    1518:	a6 17       	cp	r26, r22
    151a:	b7 07       	cpc	r27, r23
    151c:	10 f0       	brcs	.+4      	; 0x1522 <__udivmodhi4_ep>
    151e:	a6 1b       	sub	r26, r22
    1520:	b7 0b       	sbc	r27, r23

00001522 <__udivmodhi4_ep>:
    1522:	88 1f       	adc	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	5a 95       	dec	r21
    1528:	a9 f7       	brne	.-22     	; 0x1514 <__udivmodhi4_loop>
    152a:	80 95       	com	r24
    152c:	90 95       	com	r25
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	08 95       	ret

00001534 <random_r>:
    1534:	8f 92       	push	r8
    1536:	9f 92       	push	r9
    1538:	af 92       	push	r10
    153a:	bf 92       	push	r11
    153c:	cf 92       	push	r12
    153e:	df 92       	push	r13
    1540:	ef 92       	push	r14
    1542:	ff 92       	push	r15
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	ec 01       	movw	r28, r24
    154a:	68 81       	ld	r22, Y
    154c:	79 81       	ldd	r23, Y+1	; 0x01
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	9b 81       	ldd	r25, Y+3	; 0x03
    1552:	61 15       	cp	r22, r1
    1554:	71 05       	cpc	r23, r1
    1556:	81 05       	cpc	r24, r1
    1558:	91 05       	cpc	r25, r1
    155a:	21 f4       	brne	.+8      	; 0x1564 <random_r+0x30>
    155c:	64 e2       	ldi	r22, 0x24	; 36
    155e:	79 ed       	ldi	r23, 0xD9	; 217
    1560:	8b e5       	ldi	r24, 0x5B	; 91
    1562:	97 e0       	ldi	r25, 0x07	; 7
    1564:	2d e1       	ldi	r18, 0x1D	; 29
    1566:	33 ef       	ldi	r19, 0xF3	; 243
    1568:	41 e0       	ldi	r20, 0x01	; 1
    156a:	50 e0       	ldi	r21, 0x00	; 0
    156c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__divmodsi4>
    1570:	49 01       	movw	r8, r18
    1572:	5a 01       	movw	r10, r20
    1574:	9b 01       	movw	r18, r22
    1576:	ac 01       	movw	r20, r24
    1578:	a7 ea       	ldi	r26, 0xA7	; 167
    157a:	b1 e4       	ldi	r27, 0x41	; 65
    157c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__muluhisi3>
    1580:	6b 01       	movw	r12, r22
    1582:	7c 01       	movw	r14, r24
    1584:	ac ee       	ldi	r26, 0xEC	; 236
    1586:	b4 ef       	ldi	r27, 0xF4	; 244
    1588:	a5 01       	movw	r20, r10
    158a:	94 01       	movw	r18, r8
    158c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__mulohisi3>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	8c 0d       	add	r24, r12
    1596:	9d 1d       	adc	r25, r13
    1598:	ae 1d       	adc	r26, r14
    159a:	bf 1d       	adc	r27, r15
    159c:	b7 ff       	sbrs	r27, 7
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <random_r+0x72>
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	a1 09       	sbc	r26, r1
    15a4:	b0 48       	sbci	r27, 0x80	; 128
    15a6:	88 83       	st	Y, r24
    15a8:	99 83       	std	Y+1, r25	; 0x01
    15aa:	aa 83       	std	Y+2, r26	; 0x02
    15ac:	bb 83       	std	Y+3, r27	; 0x03
    15ae:	bc 01       	movw	r22, r24
    15b0:	cd 01       	movw	r24, r26
    15b2:	9f 77       	andi	r25, 0x7F	; 127
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	df 90       	pop	r13
    15be:	cf 90       	pop	r12
    15c0:	bf 90       	pop	r11
    15c2:	af 90       	pop	r10
    15c4:	9f 90       	pop	r9
    15c6:	8f 90       	pop	r8
    15c8:	08 95       	ret

000015ca <random>:
    15ca:	8f 92       	push	r8
    15cc:	9f 92       	push	r9
    15ce:	af 92       	push	r10
    15d0:	bf 92       	push	r11
    15d2:	cf 92       	push	r12
    15d4:	df 92       	push	r13
    15d6:	ef 92       	push	r14
    15d8:	ff 92       	push	r15
    15da:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    15de:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    15e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    15e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    15ea:	61 15       	cp	r22, r1
    15ec:	71 05       	cpc	r23, r1
    15ee:	81 05       	cpc	r24, r1
    15f0:	91 05       	cpc	r25, r1
    15f2:	21 f4       	brne	.+8      	; 0x15fc <random+0x32>
    15f4:	64 e2       	ldi	r22, 0x24	; 36
    15f6:	79 ed       	ldi	r23, 0xD9	; 217
    15f8:	8b e5       	ldi	r24, 0x5B	; 91
    15fa:	97 e0       	ldi	r25, 0x07	; 7
    15fc:	2d e1       	ldi	r18, 0x1D	; 29
    15fe:	33 ef       	ldi	r19, 0xF3	; 243
    1600:	41 e0       	ldi	r20, 0x01	; 1
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__divmodsi4>
    1608:	49 01       	movw	r8, r18
    160a:	5a 01       	movw	r10, r20
    160c:	9b 01       	movw	r18, r22
    160e:	ac 01       	movw	r20, r24
    1610:	a7 ea       	ldi	r26, 0xA7	; 167
    1612:	b1 e4       	ldi	r27, 0x41	; 65
    1614:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__muluhisi3>
    1618:	6b 01       	movw	r12, r22
    161a:	7c 01       	movw	r14, r24
    161c:	ac ee       	ldi	r26, 0xEC	; 236
    161e:	b4 ef       	ldi	r27, 0xF4	; 244
    1620:	a5 01       	movw	r20, r10
    1622:	94 01       	movw	r18, r8
    1624:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__mulohisi3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	8c 0d       	add	r24, r12
    162e:	9d 1d       	adc	r25, r13
    1630:	ae 1d       	adc	r26, r14
    1632:	bf 1d       	adc	r27, r15
    1634:	b7 ff       	sbrs	r27, 7
    1636:	03 c0       	rjmp	.+6      	; 0x163e <random+0x74>
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	a1 09       	sbc	r26, r1
    163c:	b0 48       	sbci	r27, 0x80	; 128
    163e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    1642:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1646:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    164a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	9f 77       	andi	r25, 0x7F	; 127
    1654:	ff 90       	pop	r15
    1656:	ef 90       	pop	r14
    1658:	df 90       	pop	r13
    165a:	cf 90       	pop	r12
    165c:	bf 90       	pop	r11
    165e:	af 90       	pop	r10
    1660:	9f 90       	pop	r9
    1662:	8f 90       	pop	r8
    1664:	08 95       	ret

00001666 <srandom>:
    1666:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
    166a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    166e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    1672:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1676:	08 95       	ret

00001678 <memcpy_P>:
    1678:	fb 01       	movw	r30, r22
    167a:	dc 01       	movw	r26, r24
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <memcpy_P+0xa>
    167e:	05 90       	lpm	r0, Z+
    1680:	0d 92       	st	X+, r0
    1682:	41 50       	subi	r20, 0x01	; 1
    1684:	50 40       	sbci	r21, 0x00	; 0
    1686:	d8 f7       	brcc	.-10     	; 0x167e <memcpy_P+0x6>
    1688:	08 95       	ret

0000168a <sprintf>:
    168a:	ae e0       	ldi	r26, 0x0E	; 14
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	eb e4       	ldi	r30, 0x4B	; 75
    1690:	fb e0       	ldi	r31, 0x0B	; 11
    1692:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__prologue_saves__+0x1c>
    1696:	0d 89       	ldd	r16, Y+21	; 0x15
    1698:	1e 89       	ldd	r17, Y+22	; 0x16
    169a:	86 e0       	ldi	r24, 0x06	; 6
    169c:	8c 83       	std	Y+4, r24	; 0x04
    169e:	1a 83       	std	Y+2, r17	; 0x02
    16a0:	09 83       	std	Y+1, r16	; 0x01
    16a2:	8f ef       	ldi	r24, 0xFF	; 255
    16a4:	9f e7       	ldi	r25, 0x7F	; 127
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
    16aa:	ae 01       	movw	r20, r28
    16ac:	47 5e       	subi	r20, 0xE7	; 231
    16ae:	5f 4f       	sbci	r21, 0xFF	; 255
    16b0:	6f 89       	ldd	r22, Y+23	; 0x17
    16b2:	78 8d       	ldd	r23, Y+24	; 0x18
    16b4:	ce 01       	movw	r24, r28
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	0e 94 67 0b 	call	0x16ce	; 0x16ce <vfprintf>
    16bc:	ef 81       	ldd	r30, Y+7	; 0x07
    16be:	f8 85       	ldd	r31, Y+8	; 0x08
    16c0:	e0 0f       	add	r30, r16
    16c2:	f1 1f       	adc	r31, r17
    16c4:	10 82       	st	Z, r1
    16c6:	2e 96       	adiw	r28, 0x0e	; 14
    16c8:	e4 e0       	ldi	r30, 0x04	; 4
    16ca:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <__epilogue_restores__+0x1c>

000016ce <vfprintf>:
    16ce:	ab e0       	ldi	r26, 0x0B	; 11
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	ed e6       	ldi	r30, 0x6D	; 109
    16d4:	fb e0       	ldi	r31, 0x0B	; 11
    16d6:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__prologue_saves__>
    16da:	6c 01       	movw	r12, r24
    16dc:	7b 01       	movw	r14, r22
    16de:	8a 01       	movw	r16, r20
    16e0:	fc 01       	movw	r30, r24
    16e2:	17 82       	std	Z+7, r1	; 0x07
    16e4:	16 82       	std	Z+6, r1	; 0x06
    16e6:	83 81       	ldd	r24, Z+3	; 0x03
    16e8:	81 ff       	sbrs	r24, 1
    16ea:	cc c1       	rjmp	.+920    	; 0x1a84 <vfprintf+0x3b6>
    16ec:	ce 01       	movw	r24, r28
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	3c 01       	movw	r6, r24
    16f2:	f6 01       	movw	r30, r12
    16f4:	93 81       	ldd	r25, Z+3	; 0x03
    16f6:	f7 01       	movw	r30, r14
    16f8:	93 fd       	sbrc	r25, 3
    16fa:	85 91       	lpm	r24, Z+
    16fc:	93 ff       	sbrs	r25, 3
    16fe:	81 91       	ld	r24, Z+
    1700:	7f 01       	movw	r14, r30
    1702:	88 23       	and	r24, r24
    1704:	09 f4       	brne	.+2      	; 0x1708 <vfprintf+0x3a>
    1706:	ba c1       	rjmp	.+884    	; 0x1a7c <vfprintf+0x3ae>
    1708:	85 32       	cpi	r24, 0x25	; 37
    170a:	39 f4       	brne	.+14     	; 0x171a <vfprintf+0x4c>
    170c:	93 fd       	sbrc	r25, 3
    170e:	85 91       	lpm	r24, Z+
    1710:	93 ff       	sbrs	r25, 3
    1712:	81 91       	ld	r24, Z+
    1714:	7f 01       	movw	r14, r30
    1716:	85 32       	cpi	r24, 0x25	; 37
    1718:	29 f4       	brne	.+10     	; 0x1724 <vfprintf+0x56>
    171a:	b6 01       	movw	r22, r12
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <fputc>
    1722:	e7 cf       	rjmp	.-50     	; 0x16f2 <vfprintf+0x24>
    1724:	91 2c       	mov	r9, r1
    1726:	21 2c       	mov	r2, r1
    1728:	31 2c       	mov	r3, r1
    172a:	ff e1       	ldi	r31, 0x1F	; 31
    172c:	f3 15       	cp	r31, r3
    172e:	d8 f0       	brcs	.+54     	; 0x1766 <vfprintf+0x98>
    1730:	8b 32       	cpi	r24, 0x2B	; 43
    1732:	79 f0       	breq	.+30     	; 0x1752 <vfprintf+0x84>
    1734:	38 f4       	brcc	.+14     	; 0x1744 <vfprintf+0x76>
    1736:	80 32       	cpi	r24, 0x20	; 32
    1738:	79 f0       	breq	.+30     	; 0x1758 <vfprintf+0x8a>
    173a:	83 32       	cpi	r24, 0x23	; 35
    173c:	a1 f4       	brne	.+40     	; 0x1766 <vfprintf+0x98>
    173e:	23 2d       	mov	r18, r3
    1740:	20 61       	ori	r18, 0x10	; 16
    1742:	1d c0       	rjmp	.+58     	; 0x177e <vfprintf+0xb0>
    1744:	8d 32       	cpi	r24, 0x2D	; 45
    1746:	61 f0       	breq	.+24     	; 0x1760 <vfprintf+0x92>
    1748:	80 33       	cpi	r24, 0x30	; 48
    174a:	69 f4       	brne	.+26     	; 0x1766 <vfprintf+0x98>
    174c:	23 2d       	mov	r18, r3
    174e:	21 60       	ori	r18, 0x01	; 1
    1750:	16 c0       	rjmp	.+44     	; 0x177e <vfprintf+0xb0>
    1752:	83 2d       	mov	r24, r3
    1754:	82 60       	ori	r24, 0x02	; 2
    1756:	38 2e       	mov	r3, r24
    1758:	e3 2d       	mov	r30, r3
    175a:	e4 60       	ori	r30, 0x04	; 4
    175c:	3e 2e       	mov	r3, r30
    175e:	2a c0       	rjmp	.+84     	; 0x17b4 <vfprintf+0xe6>
    1760:	f3 2d       	mov	r31, r3
    1762:	f8 60       	ori	r31, 0x08	; 8
    1764:	1d c0       	rjmp	.+58     	; 0x17a0 <vfprintf+0xd2>
    1766:	37 fc       	sbrc	r3, 7
    1768:	2d c0       	rjmp	.+90     	; 0x17c4 <vfprintf+0xf6>
    176a:	20 ed       	ldi	r18, 0xD0	; 208
    176c:	28 0f       	add	r18, r24
    176e:	2a 30       	cpi	r18, 0x0A	; 10
    1770:	40 f0       	brcs	.+16     	; 0x1782 <vfprintf+0xb4>
    1772:	8e 32       	cpi	r24, 0x2E	; 46
    1774:	b9 f4       	brne	.+46     	; 0x17a4 <vfprintf+0xd6>
    1776:	36 fc       	sbrc	r3, 6
    1778:	81 c1       	rjmp	.+770    	; 0x1a7c <vfprintf+0x3ae>
    177a:	23 2d       	mov	r18, r3
    177c:	20 64       	ori	r18, 0x40	; 64
    177e:	32 2e       	mov	r3, r18
    1780:	19 c0       	rjmp	.+50     	; 0x17b4 <vfprintf+0xe6>
    1782:	36 fe       	sbrs	r3, 6
    1784:	06 c0       	rjmp	.+12     	; 0x1792 <vfprintf+0xc4>
    1786:	8a e0       	ldi	r24, 0x0A	; 10
    1788:	98 9e       	mul	r9, r24
    178a:	20 0d       	add	r18, r0
    178c:	11 24       	eor	r1, r1
    178e:	92 2e       	mov	r9, r18
    1790:	11 c0       	rjmp	.+34     	; 0x17b4 <vfprintf+0xe6>
    1792:	ea e0       	ldi	r30, 0x0A	; 10
    1794:	2e 9e       	mul	r2, r30
    1796:	20 0d       	add	r18, r0
    1798:	11 24       	eor	r1, r1
    179a:	22 2e       	mov	r2, r18
    179c:	f3 2d       	mov	r31, r3
    179e:	f0 62       	ori	r31, 0x20	; 32
    17a0:	3f 2e       	mov	r3, r31
    17a2:	08 c0       	rjmp	.+16     	; 0x17b4 <vfprintf+0xe6>
    17a4:	8c 36       	cpi	r24, 0x6C	; 108
    17a6:	21 f4       	brne	.+8      	; 0x17b0 <vfprintf+0xe2>
    17a8:	83 2d       	mov	r24, r3
    17aa:	80 68       	ori	r24, 0x80	; 128
    17ac:	38 2e       	mov	r3, r24
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <vfprintf+0xe6>
    17b0:	88 36       	cpi	r24, 0x68	; 104
    17b2:	41 f4       	brne	.+16     	; 0x17c4 <vfprintf+0xf6>
    17b4:	f7 01       	movw	r30, r14
    17b6:	93 fd       	sbrc	r25, 3
    17b8:	85 91       	lpm	r24, Z+
    17ba:	93 ff       	sbrs	r25, 3
    17bc:	81 91       	ld	r24, Z+
    17be:	7f 01       	movw	r14, r30
    17c0:	81 11       	cpse	r24, r1
    17c2:	b3 cf       	rjmp	.-154    	; 0x172a <vfprintf+0x5c>
    17c4:	98 2f       	mov	r25, r24
    17c6:	9f 7d       	andi	r25, 0xDF	; 223
    17c8:	95 54       	subi	r25, 0x45	; 69
    17ca:	93 30       	cpi	r25, 0x03	; 3
    17cc:	28 f4       	brcc	.+10     	; 0x17d8 <vfprintf+0x10a>
    17ce:	0c 5f       	subi	r16, 0xFC	; 252
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	9f e3       	ldi	r25, 0x3F	; 63
    17d4:	99 83       	std	Y+1, r25	; 0x01
    17d6:	0d c0       	rjmp	.+26     	; 0x17f2 <vfprintf+0x124>
    17d8:	83 36       	cpi	r24, 0x63	; 99
    17da:	31 f0       	breq	.+12     	; 0x17e8 <vfprintf+0x11a>
    17dc:	83 37       	cpi	r24, 0x73	; 115
    17de:	71 f0       	breq	.+28     	; 0x17fc <vfprintf+0x12e>
    17e0:	83 35       	cpi	r24, 0x53	; 83
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <vfprintf+0x118>
    17e4:	59 c0       	rjmp	.+178    	; 0x1898 <vfprintf+0x1ca>
    17e6:	21 c0       	rjmp	.+66     	; 0x182a <vfprintf+0x15c>
    17e8:	f8 01       	movw	r30, r16
    17ea:	80 81       	ld	r24, Z
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	0e 5f       	subi	r16, 0xFE	; 254
    17f0:	1f 4f       	sbci	r17, 0xFF	; 255
    17f2:	88 24       	eor	r8, r8
    17f4:	83 94       	inc	r8
    17f6:	91 2c       	mov	r9, r1
    17f8:	53 01       	movw	r10, r6
    17fa:	13 c0       	rjmp	.+38     	; 0x1822 <vfprintf+0x154>
    17fc:	28 01       	movw	r4, r16
    17fe:	f2 e0       	ldi	r31, 0x02	; 2
    1800:	4f 0e       	add	r4, r31
    1802:	51 1c       	adc	r5, r1
    1804:	f8 01       	movw	r30, r16
    1806:	a0 80       	ld	r10, Z
    1808:	b1 80       	ldd	r11, Z+1	; 0x01
    180a:	36 fe       	sbrs	r3, 6
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <vfprintf+0x146>
    180e:	69 2d       	mov	r22, r9
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <vfprintf+0x14a>
    1814:	6f ef       	ldi	r22, 0xFF	; 255
    1816:	7f ef       	ldi	r23, 0xFF	; 255
    1818:	c5 01       	movw	r24, r10
    181a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <strnlen>
    181e:	4c 01       	movw	r8, r24
    1820:	82 01       	movw	r16, r4
    1822:	f3 2d       	mov	r31, r3
    1824:	ff 77       	andi	r31, 0x7F	; 127
    1826:	3f 2e       	mov	r3, r31
    1828:	16 c0       	rjmp	.+44     	; 0x1856 <vfprintf+0x188>
    182a:	28 01       	movw	r4, r16
    182c:	22 e0       	ldi	r18, 0x02	; 2
    182e:	42 0e       	add	r4, r18
    1830:	51 1c       	adc	r5, r1
    1832:	f8 01       	movw	r30, r16
    1834:	a0 80       	ld	r10, Z
    1836:	b1 80       	ldd	r11, Z+1	; 0x01
    1838:	36 fe       	sbrs	r3, 6
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <vfprintf+0x174>
    183c:	69 2d       	mov	r22, r9
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <vfprintf+0x178>
    1842:	6f ef       	ldi	r22, 0xFF	; 255
    1844:	7f ef       	ldi	r23, 0xFF	; 255
    1846:	c5 01       	movw	r24, r10
    1848:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <strnlen_P>
    184c:	4c 01       	movw	r8, r24
    184e:	f3 2d       	mov	r31, r3
    1850:	f0 68       	ori	r31, 0x80	; 128
    1852:	3f 2e       	mov	r3, r31
    1854:	82 01       	movw	r16, r4
    1856:	33 fc       	sbrc	r3, 3
    1858:	1b c0       	rjmp	.+54     	; 0x1890 <vfprintf+0x1c2>
    185a:	82 2d       	mov	r24, r2
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	88 16       	cp	r8, r24
    1860:	99 06       	cpc	r9, r25
    1862:	b0 f4       	brcc	.+44     	; 0x1890 <vfprintf+0x1c2>
    1864:	b6 01       	movw	r22, r12
    1866:	80 e2       	ldi	r24, 0x20	; 32
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <fputc>
    186e:	2a 94       	dec	r2
    1870:	f4 cf       	rjmp	.-24     	; 0x185a <vfprintf+0x18c>
    1872:	f5 01       	movw	r30, r10
    1874:	37 fc       	sbrc	r3, 7
    1876:	85 91       	lpm	r24, Z+
    1878:	37 fe       	sbrs	r3, 7
    187a:	81 91       	ld	r24, Z+
    187c:	5f 01       	movw	r10, r30
    187e:	b6 01       	movw	r22, r12
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <fputc>
    1886:	21 10       	cpse	r2, r1
    1888:	2a 94       	dec	r2
    188a:	21 e0       	ldi	r18, 0x01	; 1
    188c:	82 1a       	sub	r8, r18
    188e:	91 08       	sbc	r9, r1
    1890:	81 14       	cp	r8, r1
    1892:	91 04       	cpc	r9, r1
    1894:	71 f7       	brne	.-36     	; 0x1872 <vfprintf+0x1a4>
    1896:	e8 c0       	rjmp	.+464    	; 0x1a68 <vfprintf+0x39a>
    1898:	84 36       	cpi	r24, 0x64	; 100
    189a:	11 f0       	breq	.+4      	; 0x18a0 <vfprintf+0x1d2>
    189c:	89 36       	cpi	r24, 0x69	; 105
    189e:	41 f5       	brne	.+80     	; 0x18f0 <vfprintf+0x222>
    18a0:	f8 01       	movw	r30, r16
    18a2:	37 fe       	sbrs	r3, 7
    18a4:	07 c0       	rjmp	.+14     	; 0x18b4 <vfprintf+0x1e6>
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	0c 5f       	subi	r16, 0xFC	; 252
    18b0:	1f 4f       	sbci	r17, 0xFF	; 255
    18b2:	08 c0       	rjmp	.+16     	; 0x18c4 <vfprintf+0x1f6>
    18b4:	60 81       	ld	r22, Z
    18b6:	71 81       	ldd	r23, Z+1	; 0x01
    18b8:	07 2e       	mov	r0, r23
    18ba:	00 0c       	add	r0, r0
    18bc:	88 0b       	sbc	r24, r24
    18be:	99 0b       	sbc	r25, r25
    18c0:	0e 5f       	subi	r16, 0xFE	; 254
    18c2:	1f 4f       	sbci	r17, 0xFF	; 255
    18c4:	f3 2d       	mov	r31, r3
    18c6:	ff 76       	andi	r31, 0x6F	; 111
    18c8:	3f 2e       	mov	r3, r31
    18ca:	97 ff       	sbrs	r25, 7
    18cc:	09 c0       	rjmp	.+18     	; 0x18e0 <vfprintf+0x212>
    18ce:	90 95       	com	r25
    18d0:	80 95       	com	r24
    18d2:	70 95       	com	r23
    18d4:	61 95       	neg	r22
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
    18d8:	8f 4f       	sbci	r24, 0xFF	; 255
    18da:	9f 4f       	sbci	r25, 0xFF	; 255
    18dc:	f0 68       	ori	r31, 0x80	; 128
    18de:	3f 2e       	mov	r3, r31
    18e0:	2a e0       	ldi	r18, 0x0A	; 10
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	a3 01       	movw	r20, r6
    18e6:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__ultoa_invert>
    18ea:	88 2e       	mov	r8, r24
    18ec:	86 18       	sub	r8, r6
    18ee:	45 c0       	rjmp	.+138    	; 0x197a <vfprintf+0x2ac>
    18f0:	85 37       	cpi	r24, 0x75	; 117
    18f2:	31 f4       	brne	.+12     	; 0x1900 <vfprintf+0x232>
    18f4:	23 2d       	mov	r18, r3
    18f6:	2f 7e       	andi	r18, 0xEF	; 239
    18f8:	b2 2e       	mov	r11, r18
    18fa:	2a e0       	ldi	r18, 0x0A	; 10
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	25 c0       	rjmp	.+74     	; 0x194a <vfprintf+0x27c>
    1900:	93 2d       	mov	r25, r3
    1902:	99 7f       	andi	r25, 0xF9	; 249
    1904:	b9 2e       	mov	r11, r25
    1906:	8f 36       	cpi	r24, 0x6F	; 111
    1908:	c1 f0       	breq	.+48     	; 0x193a <vfprintf+0x26c>
    190a:	18 f4       	brcc	.+6      	; 0x1912 <vfprintf+0x244>
    190c:	88 35       	cpi	r24, 0x58	; 88
    190e:	79 f0       	breq	.+30     	; 0x192e <vfprintf+0x260>
    1910:	b5 c0       	rjmp	.+362    	; 0x1a7c <vfprintf+0x3ae>
    1912:	80 37       	cpi	r24, 0x70	; 112
    1914:	19 f0       	breq	.+6      	; 0x191c <vfprintf+0x24e>
    1916:	88 37       	cpi	r24, 0x78	; 120
    1918:	21 f0       	breq	.+8      	; 0x1922 <vfprintf+0x254>
    191a:	b0 c0       	rjmp	.+352    	; 0x1a7c <vfprintf+0x3ae>
    191c:	e9 2f       	mov	r30, r25
    191e:	e0 61       	ori	r30, 0x10	; 16
    1920:	be 2e       	mov	r11, r30
    1922:	b4 fe       	sbrs	r11, 4
    1924:	0d c0       	rjmp	.+26     	; 0x1940 <vfprintf+0x272>
    1926:	fb 2d       	mov	r31, r11
    1928:	f4 60       	ori	r31, 0x04	; 4
    192a:	bf 2e       	mov	r11, r31
    192c:	09 c0       	rjmp	.+18     	; 0x1940 <vfprintf+0x272>
    192e:	34 fe       	sbrs	r3, 4
    1930:	0a c0       	rjmp	.+20     	; 0x1946 <vfprintf+0x278>
    1932:	29 2f       	mov	r18, r25
    1934:	26 60       	ori	r18, 0x06	; 6
    1936:	b2 2e       	mov	r11, r18
    1938:	06 c0       	rjmp	.+12     	; 0x1946 <vfprintf+0x278>
    193a:	28 e0       	ldi	r18, 0x08	; 8
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	05 c0       	rjmp	.+10     	; 0x194a <vfprintf+0x27c>
    1940:	20 e1       	ldi	r18, 0x10	; 16
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	02 c0       	rjmp	.+4      	; 0x194a <vfprintf+0x27c>
    1946:	20 e1       	ldi	r18, 0x10	; 16
    1948:	32 e0       	ldi	r19, 0x02	; 2
    194a:	f8 01       	movw	r30, r16
    194c:	b7 fe       	sbrs	r11, 7
    194e:	07 c0       	rjmp	.+14     	; 0x195e <vfprintf+0x290>
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	0c 5f       	subi	r16, 0xFC	; 252
    195a:	1f 4f       	sbci	r17, 0xFF	; 255
    195c:	06 c0       	rjmp	.+12     	; 0x196a <vfprintf+0x29c>
    195e:	60 81       	ld	r22, Z
    1960:	71 81       	ldd	r23, Z+1	; 0x01
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 5f       	subi	r16, 0xFE	; 254
    1968:	1f 4f       	sbci	r17, 0xFF	; 255
    196a:	a3 01       	movw	r20, r6
    196c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__ultoa_invert>
    1970:	88 2e       	mov	r8, r24
    1972:	86 18       	sub	r8, r6
    1974:	fb 2d       	mov	r31, r11
    1976:	ff 77       	andi	r31, 0x7F	; 127
    1978:	3f 2e       	mov	r3, r31
    197a:	36 fe       	sbrs	r3, 6
    197c:	0d c0       	rjmp	.+26     	; 0x1998 <vfprintf+0x2ca>
    197e:	23 2d       	mov	r18, r3
    1980:	2e 7f       	andi	r18, 0xFE	; 254
    1982:	a2 2e       	mov	r10, r18
    1984:	89 14       	cp	r8, r9
    1986:	58 f4       	brcc	.+22     	; 0x199e <vfprintf+0x2d0>
    1988:	34 fe       	sbrs	r3, 4
    198a:	0b c0       	rjmp	.+22     	; 0x19a2 <vfprintf+0x2d4>
    198c:	32 fc       	sbrc	r3, 2
    198e:	09 c0       	rjmp	.+18     	; 0x19a2 <vfprintf+0x2d4>
    1990:	83 2d       	mov	r24, r3
    1992:	8e 7e       	andi	r24, 0xEE	; 238
    1994:	a8 2e       	mov	r10, r24
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <vfprintf+0x2d4>
    1998:	b8 2c       	mov	r11, r8
    199a:	a3 2c       	mov	r10, r3
    199c:	03 c0       	rjmp	.+6      	; 0x19a4 <vfprintf+0x2d6>
    199e:	b8 2c       	mov	r11, r8
    19a0:	01 c0       	rjmp	.+2      	; 0x19a4 <vfprintf+0x2d6>
    19a2:	b9 2c       	mov	r11, r9
    19a4:	a4 fe       	sbrs	r10, 4
    19a6:	0f c0       	rjmp	.+30     	; 0x19c6 <vfprintf+0x2f8>
    19a8:	fe 01       	movw	r30, r28
    19aa:	e8 0d       	add	r30, r8
    19ac:	f1 1d       	adc	r31, r1
    19ae:	80 81       	ld	r24, Z
    19b0:	80 33       	cpi	r24, 0x30	; 48
    19b2:	21 f4       	brne	.+8      	; 0x19bc <vfprintf+0x2ee>
    19b4:	9a 2d       	mov	r25, r10
    19b6:	99 7e       	andi	r25, 0xE9	; 233
    19b8:	a9 2e       	mov	r10, r25
    19ba:	09 c0       	rjmp	.+18     	; 0x19ce <vfprintf+0x300>
    19bc:	a2 fe       	sbrs	r10, 2
    19be:	06 c0       	rjmp	.+12     	; 0x19cc <vfprintf+0x2fe>
    19c0:	b3 94       	inc	r11
    19c2:	b3 94       	inc	r11
    19c4:	04 c0       	rjmp	.+8      	; 0x19ce <vfprintf+0x300>
    19c6:	8a 2d       	mov	r24, r10
    19c8:	86 78       	andi	r24, 0x86	; 134
    19ca:	09 f0       	breq	.+2      	; 0x19ce <vfprintf+0x300>
    19cc:	b3 94       	inc	r11
    19ce:	a3 fc       	sbrc	r10, 3
    19d0:	11 c0       	rjmp	.+34     	; 0x19f4 <vfprintf+0x326>
    19d2:	a0 fe       	sbrs	r10, 0
    19d4:	06 c0       	rjmp	.+12     	; 0x19e2 <vfprintf+0x314>
    19d6:	b2 14       	cp	r11, r2
    19d8:	88 f4       	brcc	.+34     	; 0x19fc <vfprintf+0x32e>
    19da:	28 0c       	add	r2, r8
    19dc:	92 2c       	mov	r9, r2
    19de:	9b 18       	sub	r9, r11
    19e0:	0e c0       	rjmp	.+28     	; 0x19fe <vfprintf+0x330>
    19e2:	b2 14       	cp	r11, r2
    19e4:	60 f4       	brcc	.+24     	; 0x19fe <vfprintf+0x330>
    19e6:	b6 01       	movw	r22, r12
    19e8:	80 e2       	ldi	r24, 0x20	; 32
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <fputc>
    19f0:	b3 94       	inc	r11
    19f2:	f7 cf       	rjmp	.-18     	; 0x19e2 <vfprintf+0x314>
    19f4:	b2 14       	cp	r11, r2
    19f6:	18 f4       	brcc	.+6      	; 0x19fe <vfprintf+0x330>
    19f8:	2b 18       	sub	r2, r11
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <vfprintf+0x332>
    19fc:	98 2c       	mov	r9, r8
    19fe:	21 2c       	mov	r2, r1
    1a00:	a4 fe       	sbrs	r10, 4
    1a02:	10 c0       	rjmp	.+32     	; 0x1a24 <vfprintf+0x356>
    1a04:	b6 01       	movw	r22, r12
    1a06:	80 e3       	ldi	r24, 0x30	; 48
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <fputc>
    1a0e:	a2 fe       	sbrs	r10, 2
    1a10:	17 c0       	rjmp	.+46     	; 0x1a40 <vfprintf+0x372>
    1a12:	a1 fc       	sbrc	r10, 1
    1a14:	03 c0       	rjmp	.+6      	; 0x1a1c <vfprintf+0x34e>
    1a16:	88 e7       	ldi	r24, 0x78	; 120
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <vfprintf+0x352>
    1a1c:	88 e5       	ldi	r24, 0x58	; 88
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	b6 01       	movw	r22, r12
    1a22:	0c c0       	rjmp	.+24     	; 0x1a3c <vfprintf+0x36e>
    1a24:	8a 2d       	mov	r24, r10
    1a26:	86 78       	andi	r24, 0x86	; 134
    1a28:	59 f0       	breq	.+22     	; 0x1a40 <vfprintf+0x372>
    1a2a:	a1 fe       	sbrs	r10, 1
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <vfprintf+0x364>
    1a2e:	8b e2       	ldi	r24, 0x2B	; 43
    1a30:	01 c0       	rjmp	.+2      	; 0x1a34 <vfprintf+0x366>
    1a32:	80 e2       	ldi	r24, 0x20	; 32
    1a34:	a7 fc       	sbrc	r10, 7
    1a36:	8d e2       	ldi	r24, 0x2D	; 45
    1a38:	b6 01       	movw	r22, r12
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <fputc>
    1a40:	89 14       	cp	r8, r9
    1a42:	38 f4       	brcc	.+14     	; 0x1a52 <vfprintf+0x384>
    1a44:	b6 01       	movw	r22, r12
    1a46:	80 e3       	ldi	r24, 0x30	; 48
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <fputc>
    1a4e:	9a 94       	dec	r9
    1a50:	f7 cf       	rjmp	.-18     	; 0x1a40 <vfprintf+0x372>
    1a52:	8a 94       	dec	r8
    1a54:	f3 01       	movw	r30, r6
    1a56:	e8 0d       	add	r30, r8
    1a58:	f1 1d       	adc	r31, r1
    1a5a:	80 81       	ld	r24, Z
    1a5c:	b6 01       	movw	r22, r12
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <fputc>
    1a64:	81 10       	cpse	r8, r1
    1a66:	f5 cf       	rjmp	.-22     	; 0x1a52 <vfprintf+0x384>
    1a68:	22 20       	and	r2, r2
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <vfprintf+0x3a0>
    1a6c:	42 ce       	rjmp	.-892    	; 0x16f2 <vfprintf+0x24>
    1a6e:	b6 01       	movw	r22, r12
    1a70:	80 e2       	ldi	r24, 0x20	; 32
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <fputc>
    1a78:	2a 94       	dec	r2
    1a7a:	f6 cf       	rjmp	.-20     	; 0x1a68 <vfprintf+0x39a>
    1a7c:	f6 01       	movw	r30, r12
    1a7e:	86 81       	ldd	r24, Z+6	; 0x06
    1a80:	97 81       	ldd	r25, Z+7	; 0x07
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <vfprintf+0x3ba>
    1a84:	8f ef       	ldi	r24, 0xFF	; 255
    1a86:	9f ef       	ldi	r25, 0xFF	; 255
    1a88:	2b 96       	adiw	r28, 0x0b	; 11
    1a8a:	e2 e1       	ldi	r30, 0x12	; 18
    1a8c:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__epilogue_restores__>

00001a90 <strnlen_P>:
    1a90:	fc 01       	movw	r30, r24
    1a92:	05 90       	lpm	r0, Z+
    1a94:	61 50       	subi	r22, 0x01	; 1
    1a96:	70 40       	sbci	r23, 0x00	; 0
    1a98:	01 10       	cpse	r0, r1
    1a9a:	d8 f7       	brcc	.-10     	; 0x1a92 <strnlen_P+0x2>
    1a9c:	80 95       	com	r24
    1a9e:	90 95       	com	r25
    1aa0:	8e 0f       	add	r24, r30
    1aa2:	9f 1f       	adc	r25, r31
    1aa4:	08 95       	ret

00001aa6 <strnlen>:
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	61 50       	subi	r22, 0x01	; 1
    1aaa:	70 40       	sbci	r23, 0x00	; 0
    1aac:	01 90       	ld	r0, Z+
    1aae:	01 10       	cpse	r0, r1
    1ab0:	d8 f7       	brcc	.-10     	; 0x1aa8 <strnlen+0x2>
    1ab2:	80 95       	com	r24
    1ab4:	90 95       	com	r25
    1ab6:	8e 0f       	add	r24, r30
    1ab8:	9f 1f       	adc	r25, r31
    1aba:	08 95       	ret

00001abc <fputc>:
    1abc:	0f 93       	push	r16
    1abe:	1f 93       	push	r17
    1ac0:	cf 93       	push	r28
    1ac2:	df 93       	push	r29
    1ac4:	fb 01       	movw	r30, r22
    1ac6:	23 81       	ldd	r18, Z+3	; 0x03
    1ac8:	21 fd       	sbrc	r18, 1
    1aca:	03 c0       	rjmp	.+6      	; 0x1ad2 <fputc+0x16>
    1acc:	8f ef       	ldi	r24, 0xFF	; 255
    1ace:	9f ef       	ldi	r25, 0xFF	; 255
    1ad0:	2c c0       	rjmp	.+88     	; 0x1b2a <fputc+0x6e>
    1ad2:	22 ff       	sbrs	r18, 2
    1ad4:	16 c0       	rjmp	.+44     	; 0x1b02 <fputc+0x46>
    1ad6:	46 81       	ldd	r20, Z+6	; 0x06
    1ad8:	57 81       	ldd	r21, Z+7	; 0x07
    1ada:	24 81       	ldd	r18, Z+4	; 0x04
    1adc:	35 81       	ldd	r19, Z+5	; 0x05
    1ade:	42 17       	cp	r20, r18
    1ae0:	53 07       	cpc	r21, r19
    1ae2:	44 f4       	brge	.+16     	; 0x1af4 <fputc+0x38>
    1ae4:	a0 81       	ld	r26, Z
    1ae6:	b1 81       	ldd	r27, Z+1	; 0x01
    1ae8:	9d 01       	movw	r18, r26
    1aea:	2f 5f       	subi	r18, 0xFF	; 255
    1aec:	3f 4f       	sbci	r19, 0xFF	; 255
    1aee:	31 83       	std	Z+1, r19	; 0x01
    1af0:	20 83       	st	Z, r18
    1af2:	8c 93       	st	X, r24
    1af4:	26 81       	ldd	r18, Z+6	; 0x06
    1af6:	37 81       	ldd	r19, Z+7	; 0x07
    1af8:	2f 5f       	subi	r18, 0xFF	; 255
    1afa:	3f 4f       	sbci	r19, 0xFF	; 255
    1afc:	37 83       	std	Z+7, r19	; 0x07
    1afe:	26 83       	std	Z+6, r18	; 0x06
    1b00:	14 c0       	rjmp	.+40     	; 0x1b2a <fputc+0x6e>
    1b02:	8b 01       	movw	r16, r22
    1b04:	ec 01       	movw	r28, r24
    1b06:	fb 01       	movw	r30, r22
    1b08:	00 84       	ldd	r0, Z+8	; 0x08
    1b0a:	f1 85       	ldd	r31, Z+9	; 0x09
    1b0c:	e0 2d       	mov	r30, r0
    1b0e:	09 95       	icall
    1b10:	89 2b       	or	r24, r25
    1b12:	e1 f6       	brne	.-72     	; 0x1acc <fputc+0x10>
    1b14:	d8 01       	movw	r26, r16
    1b16:	16 96       	adiw	r26, 0x06	; 6
    1b18:	8d 91       	ld	r24, X+
    1b1a:	9c 91       	ld	r25, X
    1b1c:	17 97       	sbiw	r26, 0x07	; 7
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	17 96       	adiw	r26, 0x07	; 7
    1b22:	9c 93       	st	X, r25
    1b24:	8e 93       	st	-X, r24
    1b26:	16 97       	sbiw	r26, 0x06	; 6
    1b28:	ce 01       	movw	r24, r28
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	08 95       	ret

00001b34 <__ultoa_invert>:
    1b34:	fa 01       	movw	r30, r20
    1b36:	aa 27       	eor	r26, r26
    1b38:	28 30       	cpi	r18, 0x08	; 8
    1b3a:	51 f1       	breq	.+84     	; 0x1b90 <__ultoa_invert+0x5c>
    1b3c:	20 31       	cpi	r18, 0x10	; 16
    1b3e:	81 f1       	breq	.+96     	; 0x1ba0 <__ultoa_invert+0x6c>
    1b40:	e8 94       	clt
    1b42:	6f 93       	push	r22
    1b44:	6e 7f       	andi	r22, 0xFE	; 254
    1b46:	6e 5f       	subi	r22, 0xFE	; 254
    1b48:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4e:	af 4f       	sbci	r26, 0xFF	; 255
    1b50:	b1 e0       	ldi	r27, 0x01	; 1
    1b52:	3e d0       	rcall	.+124    	; 0x1bd0 <__ultoa_invert+0x9c>
    1b54:	b4 e0       	ldi	r27, 0x04	; 4
    1b56:	3c d0       	rcall	.+120    	; 0x1bd0 <__ultoa_invert+0x9c>
    1b58:	67 0f       	add	r22, r23
    1b5a:	78 1f       	adc	r23, r24
    1b5c:	89 1f       	adc	r24, r25
    1b5e:	9a 1f       	adc	r25, r26
    1b60:	a1 1d       	adc	r26, r1
    1b62:	68 0f       	add	r22, r24
    1b64:	79 1f       	adc	r23, r25
    1b66:	8a 1f       	adc	r24, r26
    1b68:	91 1d       	adc	r25, r1
    1b6a:	a1 1d       	adc	r26, r1
    1b6c:	6a 0f       	add	r22, r26
    1b6e:	71 1d       	adc	r23, r1
    1b70:	81 1d       	adc	r24, r1
    1b72:	91 1d       	adc	r25, r1
    1b74:	a1 1d       	adc	r26, r1
    1b76:	20 d0       	rcall	.+64     	; 0x1bb8 <__ultoa_invert+0x84>
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <__ultoa_invert+0x48>
    1b7a:	68 94       	set
    1b7c:	3f 91       	pop	r19
    1b7e:	2a e0       	ldi	r18, 0x0A	; 10
    1b80:	26 9f       	mul	r18, r22
    1b82:	11 24       	eor	r1, r1
    1b84:	30 19       	sub	r19, r0
    1b86:	30 5d       	subi	r19, 0xD0	; 208
    1b88:	31 93       	st	Z+, r19
    1b8a:	de f6       	brtc	.-74     	; 0x1b42 <__ultoa_invert+0xe>
    1b8c:	cf 01       	movw	r24, r30
    1b8e:	08 95       	ret
    1b90:	46 2f       	mov	r20, r22
    1b92:	47 70       	andi	r20, 0x07	; 7
    1b94:	40 5d       	subi	r20, 0xD0	; 208
    1b96:	41 93       	st	Z+, r20
    1b98:	b3 e0       	ldi	r27, 0x03	; 3
    1b9a:	0f d0       	rcall	.+30     	; 0x1bba <__ultoa_invert+0x86>
    1b9c:	c9 f7       	brne	.-14     	; 0x1b90 <__ultoa_invert+0x5c>
    1b9e:	f6 cf       	rjmp	.-20     	; 0x1b8c <__ultoa_invert+0x58>
    1ba0:	46 2f       	mov	r20, r22
    1ba2:	4f 70       	andi	r20, 0x0F	; 15
    1ba4:	40 5d       	subi	r20, 0xD0	; 208
    1ba6:	4a 33       	cpi	r20, 0x3A	; 58
    1ba8:	18 f0       	brcs	.+6      	; 0x1bb0 <__ultoa_invert+0x7c>
    1baa:	49 5d       	subi	r20, 0xD9	; 217
    1bac:	31 fd       	sbrc	r19, 1
    1bae:	40 52       	subi	r20, 0x20	; 32
    1bb0:	41 93       	st	Z+, r20
    1bb2:	02 d0       	rcall	.+4      	; 0x1bb8 <__ultoa_invert+0x84>
    1bb4:	a9 f7       	brne	.-22     	; 0x1ba0 <__ultoa_invert+0x6c>
    1bb6:	ea cf       	rjmp	.-44     	; 0x1b8c <__ultoa_invert+0x58>
    1bb8:	b4 e0       	ldi	r27, 0x04	; 4
    1bba:	a6 95       	lsr	r26
    1bbc:	97 95       	ror	r25
    1bbe:	87 95       	ror	r24
    1bc0:	77 95       	ror	r23
    1bc2:	67 95       	ror	r22
    1bc4:	ba 95       	dec	r27
    1bc6:	c9 f7       	brne	.-14     	; 0x1bba <__ultoa_invert+0x86>
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	61 05       	cpc	r22, r1
    1bcc:	71 05       	cpc	r23, r1
    1bce:	08 95       	ret
    1bd0:	9b 01       	movw	r18, r22
    1bd2:	ac 01       	movw	r20, r24
    1bd4:	0a 2e       	mov	r0, r26
    1bd6:	06 94       	lsr	r0
    1bd8:	57 95       	ror	r21
    1bda:	47 95       	ror	r20
    1bdc:	37 95       	ror	r19
    1bde:	27 95       	ror	r18
    1be0:	ba 95       	dec	r27
    1be2:	c9 f7       	brne	.-14     	; 0x1bd6 <__ultoa_invert+0xa2>
    1be4:	62 0f       	add	r22, r18
    1be6:	73 1f       	adc	r23, r19
    1be8:	84 1f       	adc	r24, r20
    1bea:	95 1f       	adc	r25, r21
    1bec:	a0 1d       	adc	r26, r0
    1bee:	08 95       	ret

00001bf0 <__muluhisi3>:
    1bf0:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__umulhisi3>
    1bf4:	a5 9f       	mul	r26, r21
    1bf6:	90 0d       	add	r25, r0
    1bf8:	b4 9f       	mul	r27, r20
    1bfa:	90 0d       	add	r25, r0
    1bfc:	a4 9f       	mul	r26, r20
    1bfe:	80 0d       	add	r24, r0
    1c00:	91 1d       	adc	r25, r1
    1c02:	11 24       	eor	r1, r1
    1c04:	08 95       	ret

00001c06 <__mulshisi3>:
    1c06:	b7 ff       	sbrs	r27, 7
    1c08:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <__muluhisi3>

00001c0c <__mulohisi3>:
    1c0c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <__muluhisi3>
    1c10:	82 1b       	sub	r24, r18
    1c12:	93 0b       	sbc	r25, r19
    1c14:	08 95       	ret

00001c16 <__prologue_saves__>:
    1c16:	2f 92       	push	r2
    1c18:	3f 92       	push	r3
    1c1a:	4f 92       	push	r4
    1c1c:	5f 92       	push	r5
    1c1e:	6f 92       	push	r6
    1c20:	7f 92       	push	r7
    1c22:	8f 92       	push	r8
    1c24:	9f 92       	push	r9
    1c26:	af 92       	push	r10
    1c28:	bf 92       	push	r11
    1c2a:	cf 92       	push	r12
    1c2c:	df 92       	push	r13
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	ca 1b       	sub	r28, r26
    1c40:	db 0b       	sbc	r29, r27
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	09 94       	ijmp

00001c4e <__epilogue_restores__>:
    1c4e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c50:	39 88       	ldd	r3, Y+17	; 0x11
    1c52:	48 88       	ldd	r4, Y+16	; 0x10
    1c54:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c56:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c58:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c60:	b9 84       	ldd	r11, Y+9	; 0x09
    1c62:	c8 84       	ldd	r12, Y+8	; 0x08
    1c64:	df 80       	ldd	r13, Y+7	; 0x07
    1c66:	ee 80       	ldd	r14, Y+6	; 0x06
    1c68:	fd 80       	ldd	r15, Y+5	; 0x05
    1c6a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c6c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c6e:	aa 81       	ldd	r26, Y+2	; 0x02
    1c70:	b9 81       	ldd	r27, Y+1	; 0x01
    1c72:	ce 0f       	add	r28, r30
    1c74:	d1 1d       	adc	r29, r1
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	ed 01       	movw	r28, r26
    1c82:	08 95       	ret

00001c84 <__umulhisi3>:
    1c84:	a2 9f       	mul	r26, r18
    1c86:	b0 01       	movw	r22, r0
    1c88:	b3 9f       	mul	r27, r19
    1c8a:	c0 01       	movw	r24, r0
    1c8c:	a3 9f       	mul	r26, r19
    1c8e:	70 0d       	add	r23, r0
    1c90:	81 1d       	adc	r24, r1
    1c92:	11 24       	eor	r1, r1
    1c94:	91 1d       	adc	r25, r1
    1c96:	b2 9f       	mul	r27, r18
    1c98:	70 0d       	add	r23, r0
    1c9a:	81 1d       	adc	r24, r1
    1c9c:	11 24       	eor	r1, r1
    1c9e:	91 1d       	adc	r25, r1
    1ca0:	08 95       	ret

00001ca2 <_exit>:
    1ca2:	f8 94       	cli

00001ca4 <__stop_program>:
    1ca4:	ff cf       	rjmp	.-2      	; 0x1ca4 <__stop_program>
